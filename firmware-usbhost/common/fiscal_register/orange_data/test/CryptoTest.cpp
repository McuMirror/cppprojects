#include "extern/tomcrypt/src/headers/tomcrypt.h"
#include "logger/include/Logger.h"
#include "test/include/Test.h"

/*
Конвертор закрытого ключа из XML в PEM
https://superdry.apphb.com/tools/online-rsa-key-converter

	extern/tomcrypt/src/hashes/sha2/sha256.c \
	extern/tomcrypt/src/misc/crypt/crypt_argchk.c \
	extern/tomcrypt/src/misc/compare_testvector.c \
	extern/tomcrypt/src/math/multi.c \
	extern/tomcrypt/src/pk/rsa/rsa_import.c \
	extern/tomcrypt/src/math/ltm_desc.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_multi.c \
	extern/tomcrypt/src/pk/asn1/der/bit/der_decode_bit_string.c \
	extern/tomcrypt/src/pk/asn1/der/bit/der_decode_raw_bit_string.c \
	extern/tomcrypt/src/pk/asn1/der/bit/der_encode_bit_string.c \
	extern/tomcrypt/src/pk/asn1/der/bit/der_encode_raw_bit_string.c \
	extern/tomcrypt/src/pk/asn1/der/bit/der_length_bit_string.c \
	extern/tomcrypt/src/pk/asn1/der/boolean/der_decode_boolean.c \
	extern/tomcrypt/src/pk/asn1/der/boolean/der_encode_boolean.c \
	extern/tomcrypt/src/pk/asn1/der/boolean/der_length_boolean.c \
	extern/tomcrypt/src/pk/asn1/der/choice/der_decode_choice.c \
	extern/tomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c \
	extern/tomcrypt/src/pk/asn1/der/generalizedtime/der_encode_generalizedtime.c \
	extern/tomcrypt/src/pk/asn1/der/generalizedtime/der_length_generalizedtime.c \
	extern/tomcrypt/src/pk/asn1/der/ia5/der_decode_ia5_string.c \
	extern/tomcrypt/src/pk/asn1/der/ia5/der_encode_ia5_string.c \
	extern/tomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c \
	extern/tomcrypt/src/pk/asn1/der/integer/der_decode_integer.c \
	extern/tomcrypt/src/pk/asn1/der/integer/der_encode_integer.c \
	extern/tomcrypt/src/pk/asn1/der/integer/der_length_integer.c \
	extern/tomcrypt/src/pk/asn1/der/object_identifier/der_decode_object_identifier.c \
	extern/tomcrypt/src/pk/asn1/der/object_identifier/der_encode_object_identifier.c \
	extern/tomcrypt/src/pk/asn1/der/object_identifier/der_length_object_identifier.c \
	extern/tomcrypt/src/pk/asn1/der/octet/der_decode_octet_string.c \
	extern/tomcrypt/src/pk/asn1/der/octet/der_encode_octet_string.c \
	extern/tomcrypt/src/pk/asn1/der/octet/der_length_octet_string.c \
	extern/tomcrypt/src/pk/asn1/der/printable_string/der_decode_printable_string.c \
	extern/tomcrypt/src/pk/asn1/der/printable_string/der_encode_printable_string.c \
	extern/tomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_ex.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_flexi.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_decode_subject_public_key_info.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_encode_sequence_ex.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_encode_sequence_multi.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_encode_subject_public_key_info.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_length_sequence.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_sequence_free.c \
	extern/tomcrypt/src/pk/asn1/der/sequence/der_sequence_shrink.c \
	extern/tomcrypt/src/pk/asn1/der/set/der_encode_set.c \
	extern/tomcrypt/src/pk/asn1/der/set/der_encode_setof.c \
	extern/tomcrypt/src/pk/asn1/der/short_integer/der_decode_short_integer.c \
	extern/tomcrypt/src/pk/asn1/der/short_integer/der_encode_short_integer.c \
	extern/tomcrypt/src/pk/asn1/der/short_integer/der_length_short_integer.c \
	extern/tomcrypt/src/pk/asn1/der/teletex_string/der_decode_teletex_string.c \
	extern/tomcrypt/src/pk/asn1/der/teletex_string/der_length_teletex_string.c \
	extern/tomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c \
	extern/tomcrypt/src/pk/asn1/der/utctime/der_encode_utctime.c \
	extern/tomcrypt/src/pk/asn1/der/utctime/der_length_utctime.c \
	extern/tomcrypt/src/pk/asn1/der/utf8/der_decode_utf8_string.c \
	extern/tomcrypt/src/pk/asn1/der/utf8/der_encode_utf8_string.c \
	extern/tomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c \
	extern/tommath/bn_mp_addmod.c \
	extern/tommath/bn_mp_rand.c \
	extern/tommath/bn_mp_submod.c \
	extern/tommath/bn_error.c \
	extern/tommath/bn_fast_mp_invmod.c \
	extern/tommath/bn_fast_mp_montgomery_reduce.c \
	extern/tommath/bn_fast_s_mp_mul_digs.c \
	extern/tommath/bn_fast_s_mp_mul_high_digs.c \
	extern/tommath/bn_fast_s_mp_sqr.c \
	extern/tommath/bn_mp_2expt.c \
	extern/tommath/bn_mp_abs.c \
	extern/tommath/bn_mp_add.c \
	extern/tommath/bn_mp_add_d.c \
	extern/tommath/bn_mp_and.c \
	extern/tommath/bn_mp_clamp.c \
	extern/tommath/bn_mp_clear.c \
	extern/tommath/bn_mp_clear_multi.c \
	extern/tommath/bn_mp_cmp.c \
	extern/tommath/bn_mp_cmp_d.c \
	extern/tommath/bn_mp_cmp_mag.c \
	extern/tommath/bn_mp_cnt_lsb.c \
	extern/tommath/bn_mp_copy.c \
	extern/tommath/bn_mp_count_bits.c \
	extern/tommath/bn_mp_div.c \
	extern/tommath/bn_mp_div_2.c \
	extern/tommath/bn_mp_div_2d.c \
	extern/tommath/bn_mp_div_3.c \
	extern/tommath/bn_mp_div_d.c \
	extern/tommath/bn_mp_dr_is_modulus.c \
	extern/tommath/bn_mp_dr_reduce.c \
	extern/tommath/bn_mp_dr_setup.c \
	extern/tommath/bn_mp_exch.c \
	extern/tommath/bn_mp_export.c \
	extern/tommath/bn_mp_expt_d.c \
	extern/tommath/bn_mp_expt_d_ex.c \
	extern/tommath/bn_mp_exptmod.c \
	extern/tommath/bn_mp_exptmod_fast.c \
	extern/tommath/bn_mp_exteuclid.c \
	extern/tommath/bn_mp_fread.c \
	extern/tommath/bn_mp_fwrite.c \
	extern/tommath/bn_mp_gcd.c \
	extern/tommath/bn_mp_get_int.c \
	extern/tommath/bn_mp_get_long.c \
	extern/tommath/bn_mp_get_long_long.c \
	extern/tommath/bn_mp_grow.c \
	extern/tommath/bn_mp_import.c \
	extern/tommath/bn_mp_init.c \
	extern/tommath/bn_mp_init_copy.c \
	extern/tommath/bn_mp_init_multi.c \
	extern/tommath/bn_mp_init_set.c \
	extern/tommath/bn_mp_init_set_int.c \
	extern/tommath/bn_mp_init_size.c \
	extern/tommath/bn_mp_invmod.c \
	extern/tommath/bn_mp_invmod_slow.c \
	extern/tommath/bn_mp_is_square.c \
	extern/tommath/bn_mp_jacobi.c \
	extern/tommath/bn_mp_karatsuba_mul.c \
	extern/tommath/bn_mp_karatsuba_sqr.c \
	extern/tommath/bn_mp_lcm.c \
	extern/tommath/bn_mp_lshd.c \
	extern/tommath/bn_mp_mod.c \
	extern/tommath/bn_mp_mod_2d.c \
	extern/tommath/bn_mp_mod_d.c \
	extern/tommath/bn_mp_montgomery_calc_normalization.c \
	extern/tommath/bn_mp_montgomery_reduce.c \
	extern/tommath/bn_mp_montgomery_setup.c \
	extern/tommath/bn_mp_mul.c \
	extern/tommath/bn_mp_mul_2.c \
	extern/tommath/bn_mp_mul_2d.c \
	extern/tommath/bn_mp_mul_d.c \
	extern/tommath/bn_mp_mulmod.c \
	extern/tommath/bn_mp_n_root.c \
	extern/tommath/bn_mp_n_root_ex.c \
	extern/tommath/bn_mp_neg.c \
	extern/tommath/bn_mp_or.c \
	extern/tommath/bn_mp_prime_fermat.c \
	extern/tommath/bn_mp_prime_is_divisible.c \
	extern/tommath/bn_mp_prime_is_prime.c \
	extern/tommath/bn_mp_prime_miller_rabin.c \
	extern/tommath/bn_mp_prime_next_prime.c \
	extern/tommath/bn_mp_prime_rabin_miller_trials.c \
	extern/tommath/bn_mp_prime_random_ex.c \
	extern/tommath/bn_mp_radix_size.c \
	extern/tommath/bn_mp_radix_smap.c \
	extern/tommath/bn_mp_read_radix.c \
	extern/tommath/bn_mp_read_signed_bin.c \
	extern/tommath/bn_mp_read_unsigned_bin.c \
	extern/tommath/bn_mp_reduce.c \
	extern/tommath/bn_mp_reduce_2k.c \
	extern/tommath/bn_mp_reduce_2k_l.c \
	extern/tommath/bn_mp_reduce_2k_setup.c \
	extern/tommath/bn_mp_reduce_2k_setup_l.c \
	extern/tommath/bn_mp_reduce_is_2k.c \
	extern/tommath/bn_mp_reduce_is_2k_l.c \
	extern/tommath/bn_mp_reduce_setup.c \
	extern/tommath/bn_mp_rshd.c \
	extern/tommath/bn_mp_set.c \
	extern/tommath/bn_mp_set_int.c \
	extern/tommath/bn_mp_set_long.c \
	extern/tommath/bn_mp_set_long_long.c \
	extern/tommath/bn_mp_shrink.c \
	extern/tommath/bn_mp_signed_bin_size.c \
	extern/tommath/bn_mp_sqr.c \
	extern/tommath/bn_mp_sqrmod.c \
	extern/tommath/bn_mp_sqrt.c \
	extern/tommath/bn_mp_sqrtmod_prime.c \
	extern/tommath/bn_mp_sub.c \
	extern/tommath/bn_mp_sub_d.c \
	extern/tommath/bn_mp_to_signed_bin.c \
	extern/tommath/bn_mp_to_signed_bin_n.c \
	extern/tommath/bn_mp_to_unsigned_bin.c \
	extern/tommath/bn_mp_to_unsigned_bin_n.c \
	extern/tommath/bn_mp_toom_mul.c \
	extern/tommath/bn_mp_toom_sqr.c \
	extern/tommath/bn_mp_toradix.c \
	extern/tommath/bn_mp_toradix_n.c \
	extern/tommath/bn_mp_unsigned_bin_size.c \
	extern/tommath/bn_mp_xor.c \
	extern/tommath/bn_mp_zero.c \
	extern/tommath/bn_prime_tab.c \
	extern/tommath/bn_reverse.c \
	extern/tommath/bn_s_mp_add.c \
	extern/tommath/bn_s_mp_exptmod.c \
	extern/tommath/bn_s_mp_mul_digs.c \
	extern/tommath/bn_s_mp_mul_high_digs.c \
	extern/tommath/bn_s_mp_sqr.c \
	extern/tommath/bn_s_mp_sub.c \
	extern/tommath/bncore.c \
	extern/tomcrypt/src/misc/pk_get_oid.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_map.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_mul2add.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_mulmod.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_projective_add_point.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_projective_dbl_point.c \
	extern/tomcrypt/src/pk/rsa/rsa_exptmod.c \
	extern/tomcrypt/src/pk/rsa/rsa_make_key.c \
	extern/tomcrypt/src/pk/ecc/ltc_ecc_points.c \
	extern/tomcrypt/src/pk/rsa/rsa_free.c \
	extern/tomcrypt/src/misc/crypt/crypt_ltc_mp_descriptor.c \
	extern/tomcrypt/src/misc/zeromem.c \
	extern/tomcrypt/src/math/rand_prime.c \
	extern/tomcrypt/src/misc/crypt/crypt_prng_descriptor.c \
	extern/tomcrypt/src/misc/crypt/crypt_prng_is_valid.c \
	extern/tomcrypt/src/misc/base64/base64_decode.c \
	extern/tomcrypt/src/pk/rsa/rsa_import_x509.c \
	extern/tomcrypt/src/misc/crypt/crypt_inits.c \
	extern/tomcrypt/src/misc/crypt/crypt_register_hash.c \
	extern/tomcrypt/src/misc/crypt/crypt_hash_descriptor.c \
	extern/tomcrypt/src/pk/rsa/rsa_sign_hash.c \
	extern/tomcrypt/src/misc/crypt/crypt_hash_is_valid.c \
	extern/tomcrypt/src/pk/pkcs1/pkcs_1_pss_encode.c \
	extern/tomcrypt/src/pk/pkcs1/pkcs_1_v1_5_encode.c \
	extern/tomcrypt/src/pk/pkcs1/pkcs_1_mgf1.c \
	extern/tomcrypt/src/pk/rsa/rsa_verify_hash.c \
	extern/tomcrypt/src/pk/pkcs1/pkcs_1_pss_decode.c \
	extern/tomcrypt/src/pk/pkcs1/pkcs_1_v1_5_decode.c \
	extern/tomcrypt/src/misc/mem_neq.c \
	extern/tomcrypt/src/pk/rsa/rsa_import_pkcs8.c \
	extern/tomcrypt/src/misc/base64/base64_encode.c \
	extern/tomcrypt/src/misc/crypt/crypt_register_prng.c \
	extern/tomcrypt/src/prngs/sprng.c \
	extern/tomcrypt/src/prngs/rng_get_bytes.c \

	extern/tomcrypt/src/headers/tomcrypt.h \
	extern/tomcrypt/src/headers/tomcrypt_hash.h \
*/

class CryptoTest : public TestSet {
public:
	CryptoTest();
	bool testSha256();
	bool testRsa();
	bool testRsaVerify();
	bool testRsaFromTomCrypt();

private:
};

TEST_SET_REGISTER(CryptoTest);

CryptoTest::CryptoTest() {
	TEST_CASE_REGISTER(CryptoTest, testSha256);
	TEST_CASE_REGISTER(CryptoTest, testRsa);
	TEST_CASE_REGISTER(CryptoTest, testRsaVerify);
	TEST_CASE_REGISTER(CryptoTest, testRsaFromTomCrypt);
}

bool CryptoTest::testSha256() {
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	unsigned char tmp[32];
	hash_state md;
	sha256_init(&md);
	sha256_process(&md, data, sizeof(data));
	sha256_done(&md, tmp);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", tmp, sizeof(tmp));
	return true;
}

bool CryptoTest::testRsa() {
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	char privateKey[] =
		"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC3ycL8S2HxRptB"
		"te7yl2uje/s2pRqdXxj6D3ZiBPvPXGqQEtEddnWC6aXc/GuqM1f0C86a7xH6poo7"
		"Id8lbQ9xEMvMKghRwc0DCkM78TmPpYBosi/uACNO3Kv2QkH2t8lqlqtWIk1m7dFJ"
		"RgZO9XOc6Zcx/stM5MxHoc//kfVM/mfWDj4FsuYL0SGNR/Z40WrBkGo+3PJsFvqN"
		"ocFFonRd0TeWHY54T384XQG0vCJg8MqxVPEh6Rs1/uX8NETL5htQ7FAtx54deu9t"
		"guIZZ5w/RrsKocaP1k1jWglOErcDCtJ3jIdr1afH8ZplQ21a53UFo/2DexVf6xFX"
		"3G2cj3p3AgMBAAECggEAPUfM+Aq6kZSVWAetsL3EajKAxOuwQCDhVx+ovW4j+DQ8"
		"Y+WiTEyfShNV9qVD0PBltz3omch1GjpFhQn6OaRvraeIDH9HXttb3FOjr2zzYG4y"
		"rrYbPSRWoYj63ZWiIP2O7zdl0caGQHezfNcYa2N0NTG99DGc3/q6EnhlvjWQsSbi"
		"EjmxcPx8fmV1i4DoflMQ383nsixAFapgrROUAtCgMvhWn1kSeoojKd+e4eKZxa/S"
		"NYulsBJWNFkmo1CZH4YTqlPM+IwYeDUOnOUGNxGurRZ3qQdWs2N2ZQhnrvlh+zpz"
		"urD2hwAz6gQXP7mxxMR1xHtAD8XQ+w4OiJK6VWjoIQKBgQDdZJvvZrV6tvqNwuTJ"
		"kDZjbVU0iKkbP61rVE/6JpyzfGeS0WzGBNiCpbK3pJZnatK2nS7i9v8gAfIqGAk8"
		"1NRKLa7Qbjgw6xHEwL8VZMXzN3KsMXgGM8EziPzicCYT8VBi/kXyV0ORqRz3rMQ+"
		"JOTkWRrcw943yYyTr84Dn0l0XQKBgQDUhFWJ3lKwOs7AlAAQqR1PjfpcRvSxVZ70"
		"BxTwnJoIQQyPQ0/OjCc1sit5s+h8xh0MeKSilCmvZerFlgNtvsCd6geSERXbpN+k"
		"9Vs3jAEkVeKHeUA/afmGqGCocanlarYu7uNRLfvpG7DduHBb4yJale/XGExNnwC0"
		"N+dkUU284wKBgBaOSojQiQrQm6RXx+F1TOVCXVz102zQRwXZWDCfQHXU5eSCa7ed"
		"BMYCxbuKDDzLGF68kutSyNlk+VwqiL5m3J4WG2pm4FizimLmVFGEq9pEuu0qORVA"
		"rp1mhoU3cdm0S0FasJupIlwzw5zEQFYogh11qpP1bK14XlcpoS6jSuONAoGBAJqM"
		"EljM4X1fhvPtrY5wLeyo56UrxM8h4RK+A7Bncm0GQUf+P4+JxQn7pDpBZ5U1zfI/"
		"2hqRfS8dAvrl+WBaFGHCy/ahji/JWwrvk4J1wm7WNoMm3l4/h0MyN/jHkDJSxGKl"
		"P5LNyiDgDmNvueZY66bM2zqlZPgd5bkp3pDJv6rZAoGAaP5e5F1j6s82Pm7dCpH3"
		"mRZWnfZIKqoNQIq2BO8vA9/WrdFI2C27uNhxCp2ZDMulRdBZcoeHcwJjnyDzg4I4"
		"gBZ2nSKkVdlN1REoTjLBBdlHi8XKiXzxvpItc2wjNC2AKHaJqj/dnh3bbTAQD1iU"
		"AxPmmLJYYkhfZ2i1IrTVxZE=";
	char signature[] =
		"Sy4LEOX3dqRGx5gUM8Th0A7ViDQgBW86WYQ3+c0C/TzockaBjDQhYOB/mQSXK1mQ"
		"FZYdrIavhETdTK28jXVFGbrdojfsV18jjM2L8D9Tlynq0VLlm++r6H4dH5uYpG2y"
		"5uZcKjB293EmejLAw9mYzWQUaYT7aXn6Ko+XLBopzBQFZAnA/gA6PFL716B65Dkz"
		"rUAgj1hChvaQBA5N5mGJGIktJJ4aICrwbZodyB7k58o83OUVkzrLPTWXflpj6wlf"
		"yVjtyqb73yN48kFGIIEO0EFcWCi/3/SOxFi4Z2C8BF0Y70OIJS36Ysefyn5t3X5K"
		"Fmdu2UVSoTnI5HRG34zFqQ==";

	// init lib
	init_LTM();

	// Import DER key.
	uint8_t tmp[2048];
	unsigned long privateKeyLen = strlen(privateKey);
	unsigned long tmpLen = sizeof(tmp);
	TEST_NUMBER_EQUAL(1624, privateKeyLen);
	int err = base64_decode((uint8_t*)privateKey, privateKeyLen, tmp, &tmpLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	rsa_key key;
	const char password[] = "1234";
	err = rsa_import_pkcs8((uint8_t*)tmp, tmpLen, password, strlen(password), &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	// Register hash algorithm.
	const ltc_hash_descriptor& hash_desc = sha256_desc;
	const int hash_idx = register_hash(&hash_desc);
	TEST_NUMBER_EQUAL(true, hash_idx >= 0);

	// Hash message.
	unsigned char hash[32];
	hash_state md;
	hash_desc.init(&md);
	hash_desc.process(&md, (const unsigned char*)data, (unsigned long)sizeof(data));
	hash_desc.done(&md, hash);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", hash, sizeof(hash));

#if 0
	const unsigned long saltlen = 0;

	// Register PRNG algorithm (PSS only).
	const int prng_idx = register_prng(&sprng_desc);
	TEST_NUMBER_EQUAL(true, prng_idx >= 0);

	// Sign hash.
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_PSS, NULL, prng_idx, hash_idx, saltlen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	rsa_free(&key);
#else
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
//	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5_NA1, NULL, 0, 0, 0, &key);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5, NULL, 0, 0, 0, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	unsigned char tmp2[2048];
	unsigned long tmp2Len = sizeof(tmp);
	err = base64_encode(sig, sigLen, tmp2, &tmp2Len);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_SUBSTR_EQUAL(signature, (char*)tmp2, tmp2Len);
	return true;
}

bool CryptoTest::testRsaVerify() {
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	char publicKey[] =
		"MIIDuDCCAqCgAwIBAgIJAPh6e2WuvZmoMA0GCSqGSIb3DQEBCwUAMHExCzAJBgNV"
		"BAYTAlJVMQ8wDQYDVQQIDAZNb3Njb3cxDzANBgNVBAcMBk1vc2NvdzETMBEGA1UE"
		"CgwKT3JhbmdlZGF0YTEPMA0GA1UECwwGTmVidWxhMRowGAYDVQQDDBF3d3cub3Jh"
		"bmdlZGF0YS5ydTAeFw0xODAzMTUxNjMzMDhaFw0yODAzMTIxNjMzMDhaMHExCzAJ"
		"BgNVBAYTAlJVMQ8wDQYDVQQIDAZNb3Njb3cxDzANBgNVBAcMBk1vc2NvdzETMBEG"
		"A1UECgwKT3JhbmdlZGF0YTEPMA0GA1UECwwGTmVidWxhMRowGAYDVQQDDBF3d3cu"
		"b3JhbmdlZGF0YS5ydTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANC+"
		"p8w3cNAhHrSxkNHKk0Sqz0xUFF0z2gf2kwmkobfferWnF5Zqaq8zccTuCvgD+L6F"
		"zdUr7XQhBOnzIWREpHNMy+6l4os7ulGuYW2mr7tFwlgNcI5skHnYq4e+R+w8tHa1"
		"sc896h5/kcZBl6/ZlKeM+XpK5PGrdeE3VrKayHwi52W7kL6/R7k1keQk04M/nvns"
		"c6wTU19R1PqJHfDOTlGonnLhAbuhMlYSbXZ3/yaRDuMNapM+c/+NJe4dzpXLKmug"
		"NuUd/aGqPdWfEnI90dkis5KpMgCdE12dqPHQ4cEYhWz56cRzX47xeblQz1vYrnk1"
		"y2MT1W1By7aYsqebHJUCAwEAAaNTMFEwHQYDVR0OBBYEFHKvOec23OVrdWAfbNGL"
		"a+UevfpJMB8GA1UdIwQYMBaAFHKvOec23OVrdWAfbNGLa+UevfpJMA8GA1UdEwEB"
		"/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKGONIeB/eTF1DODzKQfRSyOgo/x"
		"YUE5bNrvwlfkoy1Ylc69mGOD6+E3Pf7m2oNr0+nh+5928z9RW7TpnisNoHSgk2yp"
		"r/AVZRG+wCfhLWItESzfuNn8MdWOp+GBYguRnnW/K6h5lUonIx3/kvdDujtiDEA+"
		"QZHqgCx08AXuFgTdxqkwpKX16UFUKLypNT8mwMzxJ4S52q4Ka/pcMlozhOW0mkRE"
		"i2fpW0dvlIerjTWvxoyLKUaYC5P1KONrFE6l02v1LN/PZ1uMOT1mpgjGVB+IFcYf"
		"8qDaGQc6WWFUHpUP9/0UzSfvPK/acHWJvDCcjCClzob+pLxbHVTZ09RaI+s=";
	char signature[] =
		"Sy4LEOX3dqRGx5gUM8Th0A7ViDQgBW86WYQ3+c0C/TzockaBjDQhYOB/mQSXK1mQ"
		"FZYdrIavhETdTK28jXVFGbrdojfsV18jjM2L8D9Tlynq0VLlm++r6H4dH5uYpG2y"
		"5uZcKjB293EmejLAw9mYzWQUaYT7aXn6Ko+XLBopzBQFZAnA/gA6PFL716B65Dkz"
		"rUAgj1hChvaQBA5N5mGJGIktJJ4aICrwbZodyB7k58o83OUVkzrLPTWXflpj6wlf"
		"yVjtyqb73yN48kFGIIEO0EFcWCi/3/SOxFi4Z2C8BF0Y70OIJS36Ysefyn5t3X5K"
		"Fmdu2UVSoTnI5HRG34zFqQ==";

	// init lib
	init_LTM();

#if 1
	// Import DER key.
	uint8_t tmp[2048];
	unsigned long publicKeyLen = strlen(publicKey);
	unsigned long tmpLen = sizeof(tmp);
	int err = base64_decode((uint8_t*)publicKey, publicKeyLen, tmp, &tmpLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	rsa_key key;
	err = rsa_import_x509((uint8_t*)tmp, tmpLen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#else
	unsigned long publicKeyLen = strlen(publicKey);
	rsa_key key;
	int err = rsa_import((uint8_t*)publicKey, publicKeyLen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	// Register hash algorithm.
	const ltc_hash_descriptor& hash_desc = sha256_desc;
	const int hash_idx = register_hash(&hash_desc);
	TEST_NUMBER_EQUAL(true, hash_idx >= 0);

	// Hash message.
	unsigned char hash[32];
	hash_state md;
	hash_desc.init(&md);
	hash_desc.process(&md, (const unsigned char*)data, (unsigned long)sizeof(data));
	hash_desc.done(&md, hash);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", hash, sizeof(hash));

#if 1
	// Register PRNG algorithm (PSS only).
//	const int prng_idx = register_prng(&sprng_desc);
//	TEST_NUMBER_EQUAL(true, prng_idx >= 0);

	// Decode sign
	unsigned long signatureLen = strlen(signature);
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	err = base64_decode((uint8_t*)signature, signatureLen, sig, &sigLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	// Sign hash.
	const unsigned long saltlen = 0;
	int stat = 0;
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
	err = rsa_verify_hash_ex(sig, sigLen, hash, hash_desc.hashsize, LTC_PKCS_1_PSS, hash_idx, saltlen, &stat, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_NUMBER_EQUAL(1234, stat);
	rsa_free(&key);
#else
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5_NA1, NULL, 0, 0, 0, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	unsigned char tmp2[2048];
	unsigned long tmp2Len = sizeof(tmp2);
	err = base64_encode(sig, sigLen, tmp2, &tmp2Len);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_SUBSTR_EQUAL(signature, (char*)tmp2, tmp2Len);
	return true;
}

bool CryptoTest::testRsaFromTomCrypt() {
	static const unsigned char openssl_private_rsa[] = {
	   0x30, 0x82, 0x02, 0x5e, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xcf, 0x9a, 0xde, 0x64, 0x8a,
	   0xda, 0xc8, 0x33, 0x20, 0xa9, 0xd7, 0x83, 0x31, 0x19, 0x54, 0xb2, 0x9a, 0x85, 0xa7, 0xa1, 0xb7,
	   0x75, 0x33, 0xb6, 0xa9, 0xac, 0x84, 0x24, 0xb3, 0xde, 0xdb, 0x7d, 0x85, 0x2d, 0x96, 0x65, 0xe5,
	   0x3f, 0x72, 0x95, 0x24, 0x9f, 0x28, 0x68, 0xca, 0x4f, 0xdb, 0x44, 0x1c, 0x3e, 0x60, 0x12, 0x8a,
	   0xdd, 0x26, 0xa5, 0xeb, 0xff, 0x0b, 0x5e, 0xd4, 0x88, 0x38, 0x49, 0x2a, 0x6e, 0x5b, 0xbf, 0x12,
	   0x37, 0x47, 0xbd, 0x05, 0x6b, 0xbc, 0xdb, 0xf3, 0xee, 0xe4, 0x11, 0x8e, 0x41, 0x68, 0x7c, 0x61,
	   0x13, 0xd7, 0x42, 0xc8, 0x80, 0xbe, 0x36, 0x8f, 0xdc, 0x08, 0x8b, 0x4f, 0xac, 0xa4, 0xe2, 0x76,
	   0x0c, 0xc9, 0x63, 0x6c, 0x49, 0x58, 0x93, 0xed, 0xcc, 0xaa, 0xdc, 0x25, 0x3b, 0x0a, 0x60, 0x3f,
	   0x8b, 0x54, 0x3a, 0xc3, 0x4d, 0x31, 0xe7, 0x94, 0xa4, 0x44, 0xfd, 0x02, 0x03, 0x01, 0x00, 0x01,
	   0x02, 0x81, 0x81, 0x00, 0xc8, 0x62, 0xb9, 0xea, 0xde, 0x44, 0x53, 0x1d, 0x56, 0x97, 0xd9, 0x97,
	   0x9e, 0x1a, 0xcf, 0x30, 0x1e, 0x0a, 0x88, 0x45, 0x86, 0x29, 0x30, 0xa3, 0x4d, 0x9f, 0x61, 0x65,
	   0x73, 0xe0, 0xd6, 0x87, 0x8f, 0xb6, 0xf3, 0x06, 0xa3, 0x82, 0xdc, 0x7c, 0xac, 0xfe, 0x9b, 0x28,
	   0x9a, 0xae, 0xfd, 0xfb, 0xfe, 0x2f, 0x0e, 0xd8, 0x97, 0x04, 0xe3, 0xbb, 0x1f, 0xd1, 0xec, 0x0d,
	   0xba, 0xa3, 0x49, 0x7f, 0x47, 0xac, 0x8a, 0x44, 0x04, 0x7e, 0x86, 0xb7, 0x39, 0x42, 0x3f, 0xad,
	   0x1e, 0xb7, 0x0e, 0xa5, 0x51, 0xf4, 0x40, 0x63, 0x1e, 0xfd, 0xbd, 0xea, 0x9f, 0x41, 0x9f, 0xa8,
	   0x90, 0x1d, 0x6f, 0x0a, 0x5a, 0x95, 0x13, 0x11, 0x0d, 0x80, 0xaf, 0x5f, 0x64, 0x98, 0x8a, 0x2c,
	   0x78, 0x68, 0x65, 0xb0, 0x2b, 0x8b, 0xa2, 0x53, 0x87, 0xca, 0xf1, 0x64, 0x04, 0xab, 0xf2, 0x7b,
	   0xdb, 0x83, 0xc8, 0x81, 0x02, 0x41, 0x00, 0xf7, 0xbe, 0x5e, 0x23, 0xc3, 0x32, 0x3f, 0xbf, 0x8b,
	   0x8e, 0x3a, 0xee, 0xfc, 0xfc, 0xcb, 0xe5, 0xf7, 0xf1, 0x0b, 0xbc, 0x42, 0x82, 0xae, 0xd5, 0x7a,
	   0x3e, 0xca, 0xf7, 0xd5, 0x69, 0x3f, 0x64, 0x25, 0xa2, 0x1f, 0xb7, 0x75, 0x75, 0x05, 0x92, 0x42,
	   0xeb, 0xb8, 0xf1, 0xf3, 0x0a, 0x05, 0xe3, 0x94, 0xd1, 0x55, 0x78, 0x35, 0xa0, 0x36, 0xa0, 0x9b,
	   0x7c, 0x92, 0x84, 0x6c, 0xdd, 0xdc, 0x4d, 0x02, 0x41, 0x00, 0xd6, 0x86, 0x0e, 0x85, 0x42, 0x0b,
	   0x04, 0x08, 0x84, 0x21, 0x60, 0xf0, 0x0e, 0x0d, 0x88, 0xfd, 0x1e, 0x36, 0x10, 0x65, 0x4f, 0x1e,
	   0x53, 0xb4, 0x08, 0x72, 0x80, 0x5c, 0x3f, 0x59, 0x66, 0x17, 0xe6, 0x98, 0xf2, 0xe9, 0x6c, 0x7a,
	   0x06, 0x4c, 0xac, 0x76, 0x3d, 0xed, 0x8c, 0xa1, 0xce, 0xad, 0x1b, 0xbd, 0xb4, 0x7d, 0x28, 0xbc,
	   0xe3, 0x0e, 0x38, 0x8d, 0x99, 0xd8, 0x05, 0xb5, 0xa3, 0x71, 0x02, 0x40, 0x6d, 0xeb, 0xc3, 0x2d,
	   0x2e, 0xf0, 0x5e, 0xa4, 0x88, 0x31, 0x05, 0x29, 0x00, 0x8a, 0xd1, 0x95, 0x29, 0x9b, 0x83, 0xcf,
	   0x75, 0xdb, 0x31, 0xe3, 0x7a, 0x27, 0xde, 0x3a, 0x74, 0x30, 0x0c, 0x76, 0x4c, 0xd4, 0x50, 0x2a,
	   0x40, 0x2d, 0x39, 0xd9, 0x99, 0x63, 0xa9, 0x5d, 0x80, 0xae, 0x53, 0xca, 0x94, 0x3f, 0x05, 0x23,
	   0x1e, 0xf8, 0x05, 0x04, 0xe1, 0xb8, 0x35, 0xf2, 0x17, 0xb3, 0xa0, 0x89, 0x02, 0x41, 0x00, 0xab,
	   0x90, 0x88, 0xfa, 0x60, 0x08, 0x29, 0x50, 0x9a, 0x43, 0x8b, 0xa0, 0x50, 0xcc, 0xd8, 0x5a, 0xfe,
	   0x97, 0x64, 0x63, 0x71, 0x74, 0x22, 0xa3, 0x20, 0x02, 0x5a, 0xcf, 0xeb, 0xc6, 0x16, 0x95, 0x54,
	   0xd1, 0xcb, 0xab, 0x8d, 0x1a, 0xc6, 0x00, 0xfa, 0x08, 0x92, 0x9c, 0x71, 0xd5, 0x52, 0x52, 0x35,
	   0x96, 0x71, 0x4b, 0x8b, 0x92, 0x0c, 0xd0, 0xe9, 0xbf, 0xad, 0x63, 0x0b, 0xa5, 0xe9, 0xb1, 0x02,
	   0x41, 0x00, 0xdc, 0xcc, 0x27, 0xc8, 0xe4, 0xdc, 0x62, 0x48, 0xd5, 0x9b, 0xaf, 0xf5, 0xab, 0x60,
	   0xf6, 0x21, 0xfd, 0x53, 0xe2, 0xb7, 0x5d, 0x09, 0xc9, 0x1a, 0xa1, 0x04, 0xa9, 0xfc, 0x61, 0x2c,
	   0x5d, 0x04, 0x58, 0x3a, 0x5a, 0x39, 0xf1, 0x4a, 0x21, 0x56, 0x67, 0xfd, 0xcc, 0x20, 0xa3, 0x8f,
	   0x78, 0x18, 0x5a, 0x79, 0x3d, 0x2e, 0x8e, 0x7e, 0x86, 0x0a, 0xe6, 0xa8, 0x33, 0xc1, 0x04, 0x17,
	   0x4a, 0x9f
	};
	/*** openssl public RSA key in DER format */
	static const unsigned char openssl_public_rsa[] = {
	   0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
	   0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcf, 0x9a, 0xde,
	   0x64, 0x8a, 0xda, 0xc8, 0x33, 0x20, 0xa9, 0xd7, 0x83, 0x31, 0x19, 0x54, 0xb2, 0x9a, 0x85, 0xa7,
	   0xa1, 0xb7, 0x75, 0x33, 0xb6, 0xa9, 0xac, 0x84, 0x24, 0xb3, 0xde, 0xdb, 0x7d, 0x85, 0x2d, 0x96,
	   0x65, 0xe5, 0x3f, 0x72, 0x95, 0x24, 0x9f, 0x28, 0x68, 0xca, 0x4f, 0xdb, 0x44, 0x1c, 0x3e, 0x60,
	   0x12, 0x8a, 0xdd, 0x26, 0xa5, 0xeb, 0xff, 0x0b, 0x5e, 0xd4, 0x88, 0x38, 0x49, 0x2a, 0x6e, 0x5b,
	   0xbf, 0x12, 0x37, 0x47, 0xbd, 0x05, 0x6b, 0xbc, 0xdb, 0xf3, 0xee, 0xe4, 0x11, 0x8e, 0x41, 0x68,
	   0x7c, 0x61, 0x13, 0xd7, 0x42, 0xc8, 0x80, 0xbe, 0x36, 0x8f, 0xdc, 0x08, 0x8b, 0x4f, 0xac, 0xa4,
	   0xe2, 0x76, 0x0c, 0xc9, 0x63, 0x6c, 0x49, 0x58, 0x93, 0xed, 0xcc, 0xaa, 0xdc, 0x25, 0x3b, 0x0a,
	   0x60, 0x3f, 0x8b, 0x54, 0x3a, 0xc3, 0x4d, 0x31, 0xe7, 0x94, 0xa4, 0x44, 0xfd, 0x02, 0x03, 0x01,
	   0x00, 0x01
	};
	static const unsigned char openssl_rsautl_pkcs[] = {
	   0x24, 0xef, 0x54, 0xea, 0x1a, 0x12, 0x0c, 0xf4, 0x04, 0x0c, 0x48, 0xc8, 0xe8, 0x17, 0xd2, 0x6f,
	   0xc3, 0x41, 0xb3, 0x97, 0x5c, 0xbc, 0xa3, 0x2d, 0x21, 0x00, 0x10, 0x0e, 0xbb, 0xf7, 0x30, 0x21,
	   0x7e, 0x12, 0xd2, 0xdf, 0x26, 0x28, 0xd8, 0x0f, 0x6d, 0x4d, 0xc8, 0x4d, 0xa8, 0x78, 0xe7, 0x03,
	   0xee, 0xbc, 0x68, 0xba, 0x98, 0xea, 0xe9, 0xb6, 0x06, 0x8d, 0x85, 0x5b, 0xdb, 0xa6, 0x49, 0x86,
	   0x6f, 0xc7, 0x3d, 0xe0, 0x53, 0x83, 0xe0, 0xea, 0xb1, 0x08, 0x6a, 0x7b, 0xbd, 0xeb, 0xb5, 0x4a,
	   0xdd, 0xbc, 0x64, 0x97, 0x8c, 0x17, 0x20, 0xa3, 0x5c, 0xd4, 0xb8, 0x87, 0x43, 0xc5, 0x13, 0xad,
	   0x41, 0x6e, 0x45, 0x41, 0x32, 0xd4, 0x09, 0x12, 0x7f, 0xdc, 0x59, 0x1f, 0x28, 0x3f, 0x1e, 0xbc,
	   0xef, 0x57, 0x23, 0x4b, 0x3a, 0xa3, 0x24, 0x91, 0x4d, 0xfb, 0xb2, 0xd4, 0xe7, 0x5e, 0x41, 0x7e,
	};

	// init lib
	init_LTM();

	rsa_key key, pubkey;
	int stat, i;
	unsigned char buf[1024], key_parts[8][128];
	unsigned long len, key_lens[8];

	/* try reading the key */
	int err = rsa_import(openssl_private_rsa, sizeof(openssl_private_rsa), &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	err = rsa_import(openssl_public_rsa, sizeof(openssl_public_rsa), &pubkey);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	/* sign-verify a message with PKCS #1 v1.5 no ASN.1 */
	len = sizeof(buf);
	err = rsa_sign_hash_ex((unsigned char*)"test", 4, buf, &len, LTC_PKCS_1_V1_5_NA1, NULL, 0, 0, 0, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	if (len != sizeof(openssl_rsautl_pkcs) || memcmp(buf, openssl_rsautl_pkcs, len)) {
	   fprintf(stderr, "RSA rsa_sign_hash_ex + LTC_PKCS_1_V1_5_NA1 failed\n");
	   return false;
	}
	stat = 0;
	err = rsa_verify_hash_ex(openssl_rsautl_pkcs, sizeof(openssl_rsautl_pkcs), (unsigned char*)"test", 4, LTC_PKCS_1_V1_5_NA1, 0, 0, &stat, &pubkey);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	if (stat != 1) {
	   fprintf(stderr, "RSA rsa_verify_hash_ex + LTC_PKCS_1_V1_5_NA1 failed\n");
	   return false;
	}
	rsa_free(&pubkey);
	return true;
}
