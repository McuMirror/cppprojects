#include "wolfssl/wolfcrypt/rsa.h"
#include "wolfssl/wolfcrypt/signature.h"
#include "wolfssl/wolfcrypt/coding.h"
#include "logger/include/Logger.h"
#include "test/include/Test.h"

class WolfSslRsaSignTest : public TestSet {
public:
	WolfSslRsaSignTest();
	bool testSha256();
	bool testRsa();
	bool testRsaVerify();
	bool testRsaSign();

private:
	static void CbLog(const int logLevel, const char *const logMessage);
};

TEST_SET_REGISTER(WolfSslRsaSignTest);

WolfSslRsaSignTest::WolfSslRsaSignTest() {
	TEST_CASE_REGISTER(WolfSslRsaSignTest, testSha256);
	TEST_CASE_REGISTER(WolfSslRsaSignTest, testRsa);
	TEST_CASE_REGISTER(WolfSslRsaSignTest, testRsaVerify);
	TEST_CASE_REGISTER(WolfSslRsaSignTest, testRsaSign);
}

bool WolfSslRsaSignTest::testSha256() {
#if 0
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	unsigned char tmp[32];
	hash_state md;
	sha256_init(&md);
	sha256_process(&md, data, sizeof(data));
	sha256_done(&md, tmp);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", tmp, sizeof(tmp));
#endif
	return true;
}

bool WolfSslRsaSignTest::testRsa() {
#if 0
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	char privateKey[] =
		"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC3ycL8S2HxRptB"
		"te7yl2uje/s2pRqdXxj6D3ZiBPvPXGqQEtEddnWC6aXc/GuqM1f0C86a7xH6poo7"
		"Id8lbQ9xEMvMKghRwc0DCkM78TmPpYBosi/uACNO3Kv2QkH2t8lqlqtWIk1m7dFJ"
		"RgZO9XOc6Zcx/stM5MxHoc//kfVM/mfWDj4FsuYL0SGNR/Z40WrBkGo+3PJsFvqN"
		"ocFFonRd0TeWHY54T384XQG0vCJg8MqxVPEh6Rs1/uX8NETL5htQ7FAtx54deu9t"
		"guIZZ5w/RrsKocaP1k1jWglOErcDCtJ3jIdr1afH8ZplQ21a53UFo/2DexVf6xFX"
		"3G2cj3p3AgMBAAECggEAPUfM+Aq6kZSVWAetsL3EajKAxOuwQCDhVx+ovW4j+DQ8"
		"Y+WiTEyfShNV9qVD0PBltz3omch1GjpFhQn6OaRvraeIDH9HXttb3FOjr2zzYG4y"
		"rrYbPSRWoYj63ZWiIP2O7zdl0caGQHezfNcYa2N0NTG99DGc3/q6EnhlvjWQsSbi"
		"EjmxcPx8fmV1i4DoflMQ383nsixAFapgrROUAtCgMvhWn1kSeoojKd+e4eKZxa/S"
		"NYulsBJWNFkmo1CZH4YTqlPM+IwYeDUOnOUGNxGurRZ3qQdWs2N2ZQhnrvlh+zpz"
		"urD2hwAz6gQXP7mxxMR1xHtAD8XQ+w4OiJK6VWjoIQKBgQDdZJvvZrV6tvqNwuTJ"
		"kDZjbVU0iKkbP61rVE/6JpyzfGeS0WzGBNiCpbK3pJZnatK2nS7i9v8gAfIqGAk8"
		"1NRKLa7Qbjgw6xHEwL8VZMXzN3KsMXgGM8EziPzicCYT8VBi/kXyV0ORqRz3rMQ+"
		"JOTkWRrcw943yYyTr84Dn0l0XQKBgQDUhFWJ3lKwOs7AlAAQqR1PjfpcRvSxVZ70"
		"BxTwnJoIQQyPQ0/OjCc1sit5s+h8xh0MeKSilCmvZerFlgNtvsCd6geSERXbpN+k"
		"9Vs3jAEkVeKHeUA/afmGqGCocanlarYu7uNRLfvpG7DduHBb4yJale/XGExNnwC0"
		"N+dkUU284wKBgBaOSojQiQrQm6RXx+F1TOVCXVz102zQRwXZWDCfQHXU5eSCa7ed"
		"BMYCxbuKDDzLGF68kutSyNlk+VwqiL5m3J4WG2pm4FizimLmVFGEq9pEuu0qORVA"
		"rp1mhoU3cdm0S0FasJupIlwzw5zEQFYogh11qpP1bK14XlcpoS6jSuONAoGBAJqM"
		"EljM4X1fhvPtrY5wLeyo56UrxM8h4RK+A7Bncm0GQUf+P4+JxQn7pDpBZ5U1zfI/"
		"2hqRfS8dAvrl+WBaFGHCy/ahji/JWwrvk4J1wm7WNoMm3l4/h0MyN/jHkDJSxGKl"
		"P5LNyiDgDmNvueZY66bM2zqlZPgd5bkp3pDJv6rZAoGAaP5e5F1j6s82Pm7dCpH3"
		"mRZWnfZIKqoNQIq2BO8vA9/WrdFI2C27uNhxCp2ZDMulRdBZcoeHcwJjnyDzg4I4"
		"gBZ2nSKkVdlN1REoTjLBBdlHi8XKiXzxvpItc2wjNC2AKHaJqj/dnh3bbTAQD1iU"
		"AxPmmLJYYkhfZ2i1IrTVxZE=";
	char signature[] =
		"Sy4LEOX3dqRGx5gUM8Th0A7ViDQgBW86WYQ3+c0C/TzockaBjDQhYOB/mQSXK1mQ"
		"FZYdrIavhETdTK28jXVFGbrdojfsV18jjM2L8D9Tlynq0VLlm++r6H4dH5uYpG2y"
		"5uZcKjB293EmejLAw9mYzWQUaYT7aXn6Ko+XLBopzBQFZAnA/gA6PFL716B65Dkz"
		"rUAgj1hChvaQBA5N5mGJGIktJJ4aICrwbZodyB7k58o83OUVkzrLPTWXflpj6wlf"
		"yVjtyqb73yN48kFGIIEO0EFcWCi/3/SOxFi4Z2C8BF0Y70OIJS36Ysefyn5t3X5K"
		"Fmdu2UVSoTnI5HRG34zFqQ==";

	// init lib
	init_LTM();

	// Import DER key.
	uint8_t tmp[2048];
	unsigned long privateKeyLen = strlen(privateKey);
	unsigned long tmpLen = sizeof(tmp);
	TEST_NUMBER_EQUAL(1624, privateKeyLen);
	int err = base64_decode((uint8_t*)privateKey, privateKeyLen, tmp, &tmpLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	rsa_key key;
	const char password[] = "1234";
	err = rsa_import_pkcs8((uint8_t*)tmp, tmpLen, password, strlen(password), &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	// Register hash algorithm.
	const ltc_hash_descriptor& hash_desc = sha256_desc;
	const int hash_idx = register_hash(&hash_desc);
	TEST_NUMBER_EQUAL(true, hash_idx >= 0);

	// Hash message.
	unsigned char hash[32];
	hash_state md;
	hash_desc.init(&md);
	hash_desc.process(&md, (const unsigned char*)data, (unsigned long)sizeof(data));
	hash_desc.done(&md, hash);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", hash, sizeof(hash));

#if 0
	const unsigned long saltlen = 0;

	// Register PRNG algorithm (PSS only).
	const int prng_idx = register_prng(&sprng_desc);
	TEST_NUMBER_EQUAL(true, prng_idx >= 0);

	// Sign hash.
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_PSS, NULL, prng_idx, hash_idx, saltlen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	rsa_free(&key);
#else
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
//	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5_NA1, NULL, 0, 0, 0, &key);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5, NULL, 0, 0, 0, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	unsigned char tmp2[2048];
	unsigned long tmp2Len = sizeof(tmp);
	err = base64_encode(sig, sigLen, tmp2, &tmp2Len);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_SUBSTR_EQUAL(signature, (char*)tmp2, tmp2Len);
#endif
	return true;
}

bool WolfSslRsaSignTest::testRsaVerify() {
#if 0
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	char publicKey[] =
		"MIIDuDCCAqCgAwIBAgIJAPh6e2WuvZmoMA0GCSqGSIb3DQEBCwUAMHExCzAJBgNV"
		"BAYTAlJVMQ8wDQYDVQQIDAZNb3Njb3cxDzANBgNVBAcMBk1vc2NvdzETMBEGA1UE"
		"CgwKT3JhbmdlZGF0YTEPMA0GA1UECwwGTmVidWxhMRowGAYDVQQDDBF3d3cub3Jh"
		"bmdlZGF0YS5ydTAeFw0xODAzMTUxNjMzMDhaFw0yODAzMTIxNjMzMDhaMHExCzAJ"
		"BgNVBAYTAlJVMQ8wDQYDVQQIDAZNb3Njb3cxDzANBgNVBAcMBk1vc2NvdzETMBEG"
		"A1UECgwKT3JhbmdlZGF0YTEPMA0GA1UECwwGTmVidWxhMRowGAYDVQQDDBF3d3cu"
		"b3JhbmdlZGF0YS5ydTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANC+"
		"p8w3cNAhHrSxkNHKk0Sqz0xUFF0z2gf2kwmkobfferWnF5Zqaq8zccTuCvgD+L6F"
		"zdUr7XQhBOnzIWREpHNMy+6l4os7ulGuYW2mr7tFwlgNcI5skHnYq4e+R+w8tHa1"
		"sc896h5/kcZBl6/ZlKeM+XpK5PGrdeE3VrKayHwi52W7kL6/R7k1keQk04M/nvns"
		"c6wTU19R1PqJHfDOTlGonnLhAbuhMlYSbXZ3/yaRDuMNapM+c/+NJe4dzpXLKmug"
		"NuUd/aGqPdWfEnI90dkis5KpMgCdE12dqPHQ4cEYhWz56cRzX47xeblQz1vYrnk1"
		"y2MT1W1By7aYsqebHJUCAwEAAaNTMFEwHQYDVR0OBBYEFHKvOec23OVrdWAfbNGL"
		"a+UevfpJMB8GA1UdIwQYMBaAFHKvOec23OVrdWAfbNGLa+UevfpJMA8GA1UdEwEB"
		"/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKGONIeB/eTF1DODzKQfRSyOgo/x"
		"YUE5bNrvwlfkoy1Ylc69mGOD6+E3Pf7m2oNr0+nh+5928z9RW7TpnisNoHSgk2yp"
		"r/AVZRG+wCfhLWItESzfuNn8MdWOp+GBYguRnnW/K6h5lUonIx3/kvdDujtiDEA+"
		"QZHqgCx08AXuFgTdxqkwpKX16UFUKLypNT8mwMzxJ4S52q4Ka/pcMlozhOW0mkRE"
		"i2fpW0dvlIerjTWvxoyLKUaYC5P1KONrFE6l02v1LN/PZ1uMOT1mpgjGVB+IFcYf"
		"8qDaGQc6WWFUHpUP9/0UzSfvPK/acHWJvDCcjCClzob+pLxbHVTZ09RaI+s=";
	char signature[] =
		"Sy4LEOX3dqRGx5gUM8Th0A7ViDQgBW86WYQ3+c0C/TzockaBjDQhYOB/mQSXK1mQ"
		"FZYdrIavhETdTK28jXVFGbrdojfsV18jjM2L8D9Tlynq0VLlm++r6H4dH5uYpG2y"
		"5uZcKjB293EmejLAw9mYzWQUaYT7aXn6Ko+XLBopzBQFZAnA/gA6PFL716B65Dkz"
		"rUAgj1hChvaQBA5N5mGJGIktJJ4aICrwbZodyB7k58o83OUVkzrLPTWXflpj6wlf"
		"yVjtyqb73yN48kFGIIEO0EFcWCi/3/SOxFi4Z2C8BF0Y70OIJS36Ysefyn5t3X5K"
		"Fmdu2UVSoTnI5HRG34zFqQ==";

	// init lib
	init_LTM();

#if 1
	// Import DER key.
	uint8_t tmp[2048];
	unsigned long publicKeyLen = strlen(publicKey);
	unsigned long tmpLen = sizeof(tmp);
	int err = base64_decode((uint8_t*)publicKey, publicKeyLen, tmp, &tmpLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	rsa_key key;
	err = rsa_import_x509((uint8_t*)tmp, tmpLen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#else
	unsigned long publicKeyLen = strlen(publicKey);
	rsa_key key;
	int err = rsa_import((uint8_t*)publicKey, publicKeyLen, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	// Register hash algorithm.
	const ltc_hash_descriptor& hash_desc = sha256_desc;
	const int hash_idx = register_hash(&hash_desc);
	TEST_NUMBER_EQUAL(true, hash_idx >= 0);

	// Hash message.
	unsigned char hash[32];
	hash_state md;
	hash_desc.init(&md);
	hash_desc.process(&md, (const unsigned char*)data, (unsigned long)sizeof(data));
	hash_desc.done(&md, hash);
	TEST_HEXDATA_EQUAL("55E01CFDE3DADBDBACF10BF5E29D512B57DA05BA8DA8319FBBB6F5497E07D00F", hash, sizeof(hash));

#if 1
	// Register PRNG algorithm (PSS only).
//	const int prng_idx = register_prng(&sprng_desc);
//	TEST_NUMBER_EQUAL(true, prng_idx >= 0);

	// Decode sign
	unsigned long signatureLen = strlen(signature);
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	err = base64_decode((uint8_t*)signature, signatureLen, sig, &sigLen);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);

	// Sign hash.
	const unsigned long saltlen = 0;
	int stat = 0;
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
	err = rsa_verify_hash_ex(sig, sigLen, hash, hash_desc.hashsize, LTC_PKCS_1_PSS, hash_idx, saltlen, &stat, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_NUMBER_EQUAL(1234, stat);
	rsa_free(&key);
#else
	unsigned char sig[1024];
	unsigned long sigLen = sizeof(sig);
	TEST_NUMBER_EQUAL(32, hash_desc.hashsize);
	err = rsa_sign_hash_ex(hash, hash_desc.hashsize, sig, &sigLen, LTC_PKCS_1_V1_5_NA1, NULL, 0, 0, 0, &key);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
#endif

	unsigned char tmp2[2048];
	unsigned long tmp2Len = sizeof(tmp2);
	err = base64_encode(sig, sigLen, tmp2, &tmp2Len);
	TEST_NUMBER_EQUAL(CRYPT_OK, err);
	TEST_SUBSTR_EQUAL(signature, (char*)tmp2, tmp2Len);
#endif
	return true;
}

#include "wolfssl/wolfcrypt/asn.h"
#include "wolfssl/ssl.h"

void WolfSslRsaSignTest::CbLog(const int logLevel, const char *const logMessage) {
	(*Logger::get()) << logLevel << " " << logMessage << Logger::endl;
}

// https://superdry.apphb.com/tools/online-rsa-key-converter
bool WolfSslRsaSignTest::testRsaSign() {
	uint8_t data[] = {
		0x7b,0x22,0x49,0x64,0x22,0x3a,0x22,0x36,0x36,0x35, 0x34,0x39,0x38,0x37,0x36,0x32,0x31,0x36,0x31,0x22,
		0x2c,0x22,0x49,0x4e,0x4e,0x22,0x3a,0x22,0x35,0x30, 0x30,0x31,0x31,0x30,0x34,0x30,0x35,0x38,0x22,0x2c,
		0x22,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x22,0x3a, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73, 0x22,0x3a,0x5b,0x7b,0x22,0x51,0x75,0x61,0x6e,0x74,
		0x69,0x74,0x79,0x22,0x3a,0x31,0x2e,0x30,0x2c,0x22, 0x50,0x72,0x69,0x63,0x65,0x22,0x3a,0x31,0x32,0x33,
		0x2e,0x34,0x35,0x2c,0x22,0x54,0x61,0x78,0x22,0x3a, 0x36,0x2c,0x22,0x54,0x65,0x78,0x74,0x22,0x3a,0x22,
		0xd0,0x91,0xd1,0x83,0xd0,0xbb,0xd0,0xba,0xd0,0xb0, 0x22,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,
		0x4d,0x65,0x74,0x68,0x6f,0x64,0x54,0x79,0x70,0x65, 0x22,0x3a,0x34,0x2c,0x22,0x50,0x61,0x79,0x6d,0x65,
		0x6e,0x74,0x53,0x75,0x62,0x6a,0x65,0x63,0x74,0x54, 0x79,0x70,0x65,0x22,0x3a,0x31,0x7d,0x2c,0x7b,0x22,
		0x51,0x75,0x61,0x6e,0x74,0x69,0x74,0x79,0x22,0x3a, 0x32,0x2e,0x30,0x2c,0x22,0x50,0x72,0x69,0x63,0x65,
		0x22,0x3a,0x34,0x2e,0x34,0x35,0x2c,0x22,0x54,0x61, 0x78,0x22,0x3a,0x34,0x2c,0x22,0x54,0x65,0x78,0x74,
		0x22,0x3a,0x22,0xd0,0xa1,0xd0,0xbf,0xd0,0xb8,0xd1, 0x87,0xd0,0xba,0xd0,0xb8,0x22,0x2c,0x22,0x50,0x61,
		0x79,0x6d,0x65,0x6e,0x74,0x4d,0x65,0x74,0x68,0x6f, 0x64,0x54,0x79,0x70,0x65,0x22,0x3a,0x34,0x2c,0x22,
		0x50,0x61,0x79,0x6d,0x65,0x6e,0x74,0x53,0x75,0x62, 0x6a,0x65,0x63,0x74,0x54,0x79,0x70,0x65,0x22,0x3a,
		0x31,0x7d,0x5d,0x2c,0x22,0x43,0x68,0x65,0x63,0x6b, 0x43,0x6c,0x6f,0x73,0x65,0x22,0x3a,0x7b,0x22,0x50,
		0x61,0x79,0x6d,0x65,0x6e,0x74,0x73,0x22,0x3a,0x5b, 0x7b,0x22,0x54,0x79,0x70,0x65,0x22,0x3a,0x31,0x2c,
		0x22,0x41,0x6d,0x6f,0x75,0x6e,0x74,0x22,0x3a,0x31, 0x33,0x32,0x2e,0x33,0x35,0x7d,0x5d,0x2c,0x22,0x54,
		0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x53,0x79,0x73, 0x74,0x65,0x6d,0x22,0x3a,0x31,0x7d,0x2c,0x22,0x43,
		0x75,0x73,0x74,0x6f,0x6d,0x65,0x72,0x43,0x6f,0x6e, 0x74,0x61,0x63,0x74,0x22,0x3a,0x22,0x66,0x6f,0x6f,
		0x40,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63, 0x6f,0x6d,0x22,0x2c,0x22,0x41,0x67,0x65,0x6e,0x74,
		0x54,0x79,0x70,0x65,0x22,0x3a,0x32,0x7d,0x7d
	};
	char pemPrivateKey[] =
		"-----BEGIN RSA PRIVATE KEY-----\n"
		"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC3ycL8S2HxRptB\n"
		"te7yl2uje/s2pRqdXxj6D3ZiBPvPXGqQEtEddnWC6aXc/GuqM1f0C86a7xH6poo7\n"
		"Id8lbQ9xEMvMKghRwc0DCkM78TmPpYBosi/uACNO3Kv2QkH2t8lqlqtWIk1m7dFJ\n"
		"RgZO9XOc6Zcx/stM5MxHoc//kfVM/mfWDj4FsuYL0SGNR/Z40WrBkGo+3PJsFvqN\n"
		"ocFFonRd0TeWHY54T384XQG0vCJg8MqxVPEh6Rs1/uX8NETL5htQ7FAtx54deu9t\n"
		"guIZZ5w/RrsKocaP1k1jWglOErcDCtJ3jIdr1afH8ZplQ21a53UFo/2DexVf6xFX\n"
		"3G2cj3p3AgMBAAECggEAPUfM+Aq6kZSVWAetsL3EajKAxOuwQCDhVx+ovW4j+DQ8\n"
		"Y+WiTEyfShNV9qVD0PBltz3omch1GjpFhQn6OaRvraeIDH9HXttb3FOjr2zzYG4y\n"
		"rrYbPSRWoYj63ZWiIP2O7zdl0caGQHezfNcYa2N0NTG99DGc3/q6EnhlvjWQsSbi\n"
		"EjmxcPx8fmV1i4DoflMQ383nsixAFapgrROUAtCgMvhWn1kSeoojKd+e4eKZxa/S\n"
		"NYulsBJWNFkmo1CZH4YTqlPM+IwYeDUOnOUGNxGurRZ3qQdWs2N2ZQhnrvlh+zpz\n"
		"urD2hwAz6gQXP7mxxMR1xHtAD8XQ+w4OiJK6VWjoIQKBgQDdZJvvZrV6tvqNwuTJ\n"
		"kDZjbVU0iKkbP61rVE/6JpyzfGeS0WzGBNiCpbK3pJZnatK2nS7i9v8gAfIqGAk8\n"
		"1NRKLa7Qbjgw6xHEwL8VZMXzN3KsMXgGM8EziPzicCYT8VBi/kXyV0ORqRz3rMQ+\n"
		"JOTkWRrcw943yYyTr84Dn0l0XQKBgQDUhFWJ3lKwOs7AlAAQqR1PjfpcRvSxVZ70\n"
		"BxTwnJoIQQyPQ0/OjCc1sit5s+h8xh0MeKSilCmvZerFlgNtvsCd6geSERXbpN+k\n"
		"9Vs3jAEkVeKHeUA/afmGqGCocanlarYu7uNRLfvpG7DduHBb4yJale/XGExNnwC0\n"
		"N+dkUU284wKBgBaOSojQiQrQm6RXx+F1TOVCXVz102zQRwXZWDCfQHXU5eSCa7ed\n"
		"BMYCxbuKDDzLGF68kutSyNlk+VwqiL5m3J4WG2pm4FizimLmVFGEq9pEuu0qORVA\n"
		"rp1mhoU3cdm0S0FasJupIlwzw5zEQFYogh11qpP1bK14XlcpoS6jSuONAoGBAJqM\n"
		"EljM4X1fhvPtrY5wLeyo56UrxM8h4RK+A7Bncm0GQUf+P4+JxQn7pDpBZ5U1zfI/\n"
		"2hqRfS8dAvrl+WBaFGHCy/ahji/JWwrvk4J1wm7WNoMm3l4/h0MyN/jHkDJSxGKl\n"
		"P5LNyiDgDmNvueZY66bM2zqlZPgd5bkp3pDJv6rZAoGAaP5e5F1j6s82Pm7dCpH3\n"
		"mRZWnfZIKqoNQIq2BO8vA9/WrdFI2C27uNhxCp2ZDMulRdBZcoeHcwJjnyDzg4I4\n"
		"gBZ2nSKkVdlN1REoTjLBBdlHi8XKiXzxvpItc2wjNC2AKHaJqj/dnh3bbTAQD1iU\n"
		"AxPmmLJYYkhfZ2i1IrTVxZE=\n"
		"-----END RSA PRIVATE KEY-----\n";
	char signature[] =
		"Sy4LEOX3dqRGx5gUM8Th0A7ViDQgBW86WYQ3+c0C/TzockaBjDQhYOB/mQSXK1mQ"
		"FZYdrIavhETdTK28jXVFGbrdojfsV18jjM2L8D9Tlynq0VLlm++r6H4dH5uYpG2y"
		"5uZcKjB293EmejLAw9mYzWQUaYT7aXn6Ko+XLBopzBQFZAnA/gA6PFL716B65Dkz"
		"rUAgj1hChvaQBA5N5mGJGIktJJ4aICrwbZodyB7k58o83OUVkzrLPTWXflpj6wlf"
		"yVjtyqb73yN48kFGIIEO0EFcWCi/3/SOxFi4Z2C8BF0Y70OIJS36Ysefyn5t3X5K"
		"Fmdu2UVSoTnI5HRG34zFqQ==";

	wolfSSL_SetLoggingCb(CbLog);
	wolfSSL_Debugging_ON();

	int pemPrivateKeyLen = strlen(pemPrivateKey);
	uint8_t derBuf[2048];
	int derBufSize = sizeof(derBuf);
	int derLen = wc_KeyPemToDer((uint8_t*)pemPrivateKey, pemPrivateKeyLen, derBuf, derBufSize, 0);
	TEST_NUMBER_EQUAL(1217, derLen);
	RsaKey key;
	TEST_NUMBER_EQUAL(0, wc_InitRsaKey(&key, 0));

	uint32_t keyOffset = 0;
	TEST_NUMBER_EQUAL(1191, wc_GetPkcs8TraditionalOffset(derBuf, &keyOffset, derLen));
	TEST_NUMBER_EQUAL(0, wc_RsaPrivateKeyDecode(derBuf, &keyOffset, &key, derLen));

	uint8_t hash[256] = { 0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20 };
	uint32_t hashLen = wc_HashGetDigestSize(WC_HASH_TYPE_SHA256);
	TEST_NUMBER_EQUAL(32, hashLen);
	TEST_NUMBER_EQUAL(0, wc_Hash(WC_HASH_TYPE_SHA256, data, sizeof(data), hash + 19, hashLen));
	hashLen += 19;

	uint8_t sign[256];
	uint32_t signLen = sizeof(sign);
	TEST_NUMBER_EQUAL(256, wc_RsaSSL_Sign(hash, hashLen, sign, signLen, &key, 0));

	uint8_t sign64[2048];
	uint32_t sign64Len = sizeof(sign64);
	TEST_NUMBER_EQUAL(0, Base64_Encode_NoNl(sign, signLen, sign64, &sign64Len));
	TEST_NUMBER_EQUAL(344, sign64Len);
	TEST_SUBSTR_EQUAL((char*)signature, (char*)sign64, sign64Len);
	return true;
}
