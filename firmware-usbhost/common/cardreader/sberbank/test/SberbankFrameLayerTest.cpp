#include "cardreader/sberbank/SberbankFrameLayer.h"
#include "cardreader/sberbank/SberbankProtocol.h"
#include "timer/include/TimerEngine.h"
#include "uart/include/TestUart.h"
#include "utils/include/Hex.h"
#include "test/include/Test.h"
#include "logger/include/Logger.h"

/*
//=====================
// Дамп обмена Sberbank PAX D200 и конвертора от технологии v5.
//=====================
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04

>STX(02)MARK(23)BASE64(414250414441416452416F41307741414141414141414142414141413239553D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00 db d5)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00)
>>>CRC(db d5)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(d3 00 00 00 00 00 00 00 01 00 00 00)
<EOT(04)

<STX(02)MARK(23)BASE64(41417341424141645241714143534141414A6339)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 09 20 00 00 97 3d)
<<<NUM(00)
<<<LEN(0b)
<<<DATA(00 04 00 1d 44 0a 80 09 20 00 00)
<<<CRC(97 3d)
<<<<COMMAND(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(09 20 00 00)
>EOT(04)

//=====================
// сверка итогов
//=====================
>STX(02)MARK(23)BASE64(414250414441416452416F4167514141414141414141442F2F2F2F2F5774593D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 81 00 00 00 00 00 00 00 ff ff ff ff 5a d6)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 81 00 00 00 00 00 00 00 ff ff ff ff)
>>>CRC(5a d6)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(81 00 00 00 00 00 00 00 ff ff ff ff)
<EOT(04)

<STX(02)MARK(23)BASE64(41417341424141645241714143534141414A6339)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 09 20 00 00 97 3d)
<<<NUM(00)
<<<LEN(11)
<<<DATA(00 04 00 1d 44 0a 80 09 20 00 00)
<<<CRC(97 3d)
<<<<RESULT(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(09 20 00 00)
>EOT(04)

>STX(02)MARK(23)BASE64(41457874525144573467774141414141414141414277414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141415161303D)ETX(03)
>>DECODEBASE64(00 4c 6d 45 00 d6 e2 0c 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 ad)
>>>NUM(00)
>>>LEN(4c)
>>>DATA(6d 45 00 d6 e2 0c 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>CRC(41 ad)
>>>>COMMAND(6d) // (CMD_TRANSACTION) : Выполнить операцию
>>>>LEN(45 00)
>>>>NUM(d6 e2 0c 00)
>>>>DATA(00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>SUM(00 00 00 00)
>>>>>CARD_TYPE(00)
>>>>>DEP_NUM(00)
>>>>>OPERATION(07) // сверка итогов
>>>>>CARD_ROAD2(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>REQUEST_ID(00 00 00 00)
>>>>>TRANSATION_NUM(00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>FLAGS(00 00 00 00)
<EOT(04)

<STX(02)MARK(23)BASE64(41412B67434141464141414141514D414177414141414335342F3D3D)ETX(03)
<<DECODEBASE64(00 0f a0 08 00 05 00 00 00 01 03 00 03 00 00 00 00 b9 e3)
<<<NUM(00)
<<<LEN(0f)
<<<DATA(a0 08 00 05 00 00 00 01 03 00 03 00 00 00 00)
<<<CRC(b9 e3)
<<<<COMMAND(a0) // команда от терминала, вызвала некорректный ответ Технологии (запихнули ответ в середину своего фрейма)
<<<<LEN(08 00)
<<<<NUM(05 00 00 00)
<<<<DATA(01 03 00 03 00 00 00 00)
<<<<<OPERATION_CODE(01) // OPEN
<<<<<DEVICE_CODE(03) // PRINTER
<<<<<RESERVED(00)
<<<<<PARAM_LEN(03 00)
<<<<<PARAM_DATA(00 00 00)
>EOT(04)


<<DECODEBASE64(80 b4 00 bc 00 d6 e2 0c 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 f9 09 02 00 00 32 30 30 32 33 31 34 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e 7b)
<<<NUM(80)
<<<LEN(b4)
<<<DATA(00 bc 00 d6 e2 0c 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 f9 09 02 00 00 32 30 30 32 33 31 34 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<CRC(7e 7b)
<<<<RESULT(00) // ответ терминала на команду устройства
<<<<LEN(bc 00)
<<<<NUM(d6 e2 0c 80)
<<<<DATA(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 f9 09 02 00 00 32 30 30 32 33 31 34 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>ACK(06)

// продолжение после РАССИНХРОНА

//>>>>>>>>>>>>>> РАССИНХРОН >>>>>>>>>>>>>>
<02
>02
<23
>23
<41
>41
<51
>42
<38
>50
<41
>41
<41
>44
<41
>41
<41
>41
<41
>64
<41
>52
<41
>41
<41
>6F
<41
>41
<41
>30
<41
>77
<41
>41
<41
>41
<41
>41
<41<41
>41
<41
>41
<41
>41
<41
>41
<41
>41
<55
>41
<72
>42
<67
>41
<3D
>41
<3D
>41
<03
>41>04>32>39>55>3D>03
<NAK(15)????? отмена, явно что-то пошло не так

// >>>>>>>>>> РАЗБОР РАССИНХРОНА
<02<23<41<51<38<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<55<72<67<3D<3D<03

>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>04!>32>39>55>3D>03
<NAK(15) // терминал не смог принять фрейм, потому что дебилы из Технологии ответ (04!>) на фрейм запихнули в середину своего фрейма

// >>>>>>>>>> КАК ДОЛЖНО БЫЛО БЫТЬ
// завершение ответа на команду 6D
<STX(02)MARK(23)BASE64(41513841414141414141414141414141414141414141415572673D3D)ETX(03)
>>DECODEBASE64(01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 ae)
<<<NUM(01)
<<<LEN(0f)
<<<DATA(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<CRC(14 ae)
<<<<DATA(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00) хвост в цепочке фреймов
>04
<<<<<RESULT(00 00)
<<<<<AUTH_CODE(00 00 00 00 00 00 00)
<<<<<RRN(00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<<<OPERATION_NUM(00 00 00 00 00) // 0001
<<<<<CARD_NUM(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<<<CARD_VALIDITY(00 00 00 00 00 00)
<<<<<TEXT_MESSAGE(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<<<OPERATIOM_DATE(85 f0 33 01) // DATA FORMAT?
<<<<<OPERATION_TIME(f9 09 02 00) // TIME FORMAT?
<<<<<OWNER_FLAG(00) // карта выдана другим банком
<<<<<TERMINAL_NUM(32 30 30 32 33 31 34 31 00 ) // 20023141
<<<<<CARD_NAME(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00) // 631000000046
<<<<<CARD_SHA1(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<<<CARD_SECRET(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
<<<<<CARD_ID(00)
<<<<<REQUEST_ID() // Присутствует только в том случае, если в запросе было указано значение RequestID < 0

// начало очередного опроса состояния
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04

//=====================
// опрос состояния
//=====================
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04

>STX(02)MARK(23)BASE64(414250414441416452416F41307741414141414141414142414141413239553D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00 db d5)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00)
>>>CRC(db d5)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(d3 00 00 00 00 00 00 00 01 00 00 00)
<EOT(04)

<STX(02)MARK(23)BASE64(41417341424141645241714143534141414A6339)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 09 20 00 00 97 3d)
<<<NUM(00)
<<<LEN(0b)
<<<DATA(00 04 00 1d 44 0a 80 09 20 00 00)
<<<CRC(97 3d)
<<<<COMMAND(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(09 20 00 00)
>EOT(04)

//=====================
// продажа
//=====================
// обнаружение нажатия кнопки на терминале
>STX(02)MARK(23)BASE64(414250414441416452416F41307741414141414141414142414141413239553D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00 db d5)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00)
>>>CRC(db d5)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(d3 00 00 00 00 00 00 00 01 00 00 00)
<04

<STX(02)MARK(23)BASE64(41417341424141645241714151423841414F684A)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 40 1f 00 00 e8 49)
<<<NUM(00)
<<<LEN(0b)
<<<DATA(00 04 00 1d 44 0a 80 40 1f 00 00)
<<<CRC(e8 49)
<<<<RESULT(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(40 1f 00 00) // тут явно что-то в ответе терминала изменилось, видимо нажата кнопка
>04

// видимо было ожидание, нужен дамп с дампами времени

// непонятно зачем перед командой 6D идет команда C0.
// возможно перед каждой операцией проверяется состояние терминала
>STX(02)MARK(23)BASE64(414250414441416452416F417A514141414141414141442F2F2F2F2F5A68303D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 cd 00 00 00 00 00 00 00 ff ff ff ff 66 1d)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 cd 00 00 00 00 00 00 00 ff ff ff ff)
>>>CRC(66 1d)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(cd 00 00 00 00 00 00 00 ff ff ff ff)
<EOT(04)

<STX(02)MARK(23)BASE64(41417341424141645241714143534141414A6339)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 09 20 00 00 97 3d)
<<<NUM(00)
<<<LEN(0b)
<<<DATA(00 04 00 1d 44 0a 80 09 20 00 00)
<<<CRC(97 3d)
<<<<RESULT(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(09 20 00 00)
>EOT(04)

// инициирование операции оплаты
>STX(02)MARK(23)BASE64(4145787452514432626763414B434D41414141414151414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414D34553D)ETX(03)
>>DECODEBASE64(00 4c 6d 45 00 f6 6e 07 00 28 23 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 33 85)
>>>NUM(00)
>>>LEN(4c)
>>>DATA(6d 45 00 f6 6e 07 00 28 23 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>CRC(33 85)
>>>>COMMAND(6d)
>>>>LEN(45 00)
>>>>NUM(f6 6e 07 00)
>>>>DATA(28 23 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>SUM(28 23 00 00) // сумма
>>>>>CARD_TYPE(00)
>>>>>DEP_NUM(00)
>>>>>OPERATION(01) // оплата 90000 (90 рублей)
>>>>>CARD_ROAD2(00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>REQUEST_ID(00 00 00 00)
>>>>>TRANSATION_NUM(00 00 00 00 00 00 00 00 00 00 00 00 00)
>>>>>FLAGS(00 00 00 00)
>>>>>TLVLEN(00)
<04


<<DECODEBASE64(80 b4 00 bc 00 f6 6e 07 80 00 00 32 37 30 33 33 35 00 38 33 32 39 35 31 31 35 37 35 34 36 00 30 30 30 31 00 34 32 37 36 36 33 2a 2a 2a 2a 2a 2a 32 39 31 35 00 00 00 00 30 32 2f 32 30 00 8e 84 8e 81 90 85 48 8e 3a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 46 0a 02 00 01 32 30 30 32 33 31 34 31 00 56 69 73 61 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 81 71 e7 90 03 bf c4 22 a7 37 96 f0 ee 4e 0c 5b a0 5d 4d 56 d2 63 4d b7 44 ca b6 44 74 0e 69 c9 c4 dd aa 6b 5f 82 8a 3a)
<<<NUM(80)
<<<LEN(b4)
<<<DATA(00 bc 00 f6 6e 07 80 00 00 32 37 30 33 33 35 00 38 33 32 39 35 31 31 35 37 35 34 36 00 30 30 30 31 00 34 32 37 36 36 33 2a 2a 2a 2a 2a 2a 32 39 31 35 00 00 00 00 30 32 2f 32 30 00 8e 84 8e 81 90 85 48 8e 3a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 46 0a 02 00 01 32 30 30 32 33 31 34 31 00 56 69 73 61 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 81 71 e7 90 03 bf c4 22 a7 37 96 f0 ee 4e 0c 5b a0 5d 4d 56 d2 63 4d b7 44 ca b6 44 74 0e 69 c9 c4 dd aa 6b 5f 82)
<<<CRC(8a 3a)
<<<<RESULT(00)
<<<<LEN(bc 00) // длина включает данные из следующего фрейма, так как пакет был разбит на фреймы
<<<<NUM(f6 6e 07 80)
<<<<DATA(00 00 32 37 30 33 33 35 00 38 33 32 39 35 31 31 35 37 35 34 36 00 30 30 30 31 00 34 32 37 36 36 33 2a 2a 2a 2a 2a 2a 32 39 31 35 00 00 00 00 30 32 2f 32 30 00 8e 84 8e 81 90 85 48 8e 3a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 85 f0 33 01 46 0a 02 00 01 32 30 30 32 33 31 34 31 00 56 69 73 61 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00 81 71 e7 90 03 bf c4 22 a7 37 96 f0 ee 4e 0c 5b a0 5d 4d 56 d2 63 4d b7 44 ca b6 44 74 0e 69 c9 c4 dd aa 6b 5f 82)
>ACK(06)
<STX(02)MARK(23)BASE64(41512F4654306F676C374A523577596E6F5456377941504847543D3D)ETX(03)
<<DECODEBASE64(01 0f c5 4f 4a 20 97 b2 51 e7 06 27 a1 35 7b c8 03 c7 19)
<<<NUM(0x01) // пакет с данными к ответу из предыдущего фрейма
<<<LEN(15)
<<<DATA(c5 4f 4a 20 97 b2 51 e7 06 27 a1 35 7b c8 03)
<<<CRC(0xc70x19)
<<<<DATA(c5 4f 4a 20 97 b2 51 e7 06 27 a1 35 7b c8 03)
>EOT(04)
<<<<<RESULT(00 00)
<<<<<AUTH_CODE(32 37 30 33 33 35 00) //270335
<<<<<RRN(38 33 32 39 35 31 31 35 37 35 34 36 00) //832951157546
<<<<<OPERATION_NUM(30 30 30 31 00) // 0001
<<<<<CARD_NUM(34 32 37 36 36 33 2a 2a 2a 2a 2a 2a 32 39 31 35 00 00 00 00) // 427663******2915
<<<<<CARD_VALIDITY(30 32 2f 32 30 00) // 02/20
<<<<<TEXT_MESSAGE(8e 84 8e 81 90 85 48 8e 3a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00) // CODEPAGE?
<<<<<OPERATIOM_DATE(85 f0 33 01) // DATA FORMAT?
<<<<<OPERATION_TIME(46 0a 02 00) // TIME FORMAT?
<<<<<OWNER_FLAG(01) // карта выдана Сбербанком
<<<<<TERMINAL_NUM(32 30 30 32 33 31 34 31 00) // 20023141
<<<<<CARD_NAME(56 69 73 61 00 00 00 00 00 00 00 00 00 00 00 00 36 33 31 30 30 30 30 30 30 30 34 36 00 00 00 00) // Visa      631000000046
<<<<<CARD_SHA1(81 71 e7 90 03 bf c4 22 a7 37 96 f0 ee 4e 0c 5b a0 5d 4d 56)
<<<<<CARD_SECRET(d2 63 4d b7 44 ca b6 44 74 0e 69 c9 c4 dd aa 6b 5f 82 c5 4f 4a 20 97 b2 51 e7 06 27 a1 35 7b c8)
<<<<<CARD_ID(03)
<<<<<REQUEST_ID() // Присутствует только в том случае, если в запросе было указано значение RequestID < 0

//=====================
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04
 */




/*
>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04

<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04

>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04

<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04

>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03
<04

<02<23<41<41<73<41<42<41<41<64<52<41<71<41<51<42<38<41<41<4F<68<4A<03
<STX(02)MARK(23)BASE64(41417341424141645241714151423841414F684A)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 40 1f 00 00 e8 49)
<<<NUM(00)
<<<LEN(11)
<<<DATA(00 04 00 1d 44 0a 80 40 1f 00 00)
<<<CRC(e8 49)
<<<<RESULT(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(40 1f 00 00)
>EOT(04)

>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>7A>51>41>41>41>41>41>41>41>41>44>2F>2F>2F>2F>2F>5A>68>30>3D>03
>STX(02)MARK(23)BASE64(414250414441416452416F417A514141414141414141442F2F2F2F2F5A68303D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 cd 00 00 00 00 00 00 00 ff ff ff ff 66 1d)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 cd 00 00 00 00 00 00 00 ff ff ff ff)
>>>CRC(66 1d)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(cd 00 00 00 00 00 00 00 ff ff ff ff)
<EOT(04)

<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
>04

>02>23>41>45>78>74>52>51>44>32>62>67>63>41>36>41>4D>41>41>41>41>41>41>51>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>41>6E>67>51>3D>03
<04

<02<23<67<4C<51<41<76<41<44<32<62<67<65<41<30<41<63<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<4E<4C<77<4D<77<45<78<35<67<49<41<41<44<49<77<4D<44<49<7A<4D<54<51<78<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<32<4D<7A<45<77<4D<44<41<77<4D<44<41<77<4E<44<59<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<42<7A<67<41<3D<3D<03
>06>04

<02<23<41<51<38<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<41<55<72<67<3D<3D<03

>04>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03

<04<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03

>04>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03

<04<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03

>04>02>23>41>42>50>41>44>41>41>64>52>41>6F>41>30>77>41>41>41>41>41>41>41>41>41>42>41>41>41>41>32>39>55>3D>03

<04<02<23<41<41<73<41<42<41<41<64<52<41<71<41<43<53<41<41<41<4A<63<39<03
 */

class TestSberbankFrameLayerObserver : public Sberbank::FrameLayerObserver {
public:
	TestSberbankFrameLayerObserver(StringBuilder *result) : result(result) {}
	virtual ~TestSberbankFrameLayerObserver() {}

	virtual void procPacket(const uint8_t *data, const uint16_t dataLen) {
		*result << "<frame=";
		for(uint16_t i = 0; i < dataLen; i++) {
			result->addHex(data[i]);
		}
		*result << ">";
	}
	virtual void procControl(uint8_t control) {
		*result << "<control=" << control << ">";
	}
	virtual void procError(Error error) {
		*result << "<error=" << error << ">";
	}

private:
	StringBuilder *result;
};

class SberbankFrameLayerTest : public TestSet {
public:
	SberbankFrameLayerTest();
	bool init();
	void cleanup();
	bool testSendRecv();
	bool testResponseTimeout();

private:
	StringBuilder *result;
	TestUart *uart;
	TimerEngine *timerEngine;
	TestSberbankFrameLayerObserver *observer;
	Sberbank::FrameLayer *layer;
};

TEST_SET_REGISTER(SberbankFrameLayerTest);

SberbankFrameLayerTest::SberbankFrameLayerTest() {
	TEST_CASE_REGISTER(SberbankFrameLayerTest, testSendRecv);
//	TEST_CASE_REGISTER(SberbankFrameLayerTest, testResponseTimeout);
}

bool SberbankFrameLayerTest::init() {
	this->result = new StringBuilder;
	this->uart = new TestUart(256);
	this->timerEngine = new TimerEngine();
	this->observer = new TestSberbankFrameLayerObserver(result);
	this->layer = new Sberbank::FrameLayer(this->timerEngine, this->uart);
	this->layer->setObserver(observer);
	return true;
}

void SberbankFrameLayerTest::cleanup() {
	delete this->layer;
	delete this->observer;
	delete this->timerEngine;
	delete this->uart;
	delete this->result;
}

/*
>STX(02)MARK(23)BASE64(414250414441416452416F41307741414141414141414142414141413239553D)ETX(03)
>>DECODEBASE64(00 13 c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00 db d5)
>>>NUM(00)
>>>LEN(13)
>>>DATA(c0 0c 00 1d 44 0a 00 d3 00 00 00 00 00 00 00 01 00 00 00)
>>>CRC(db d5)
>>>>COMMAND(c0)
>>>>LEN(0c 00)
>>>>NUM(1d 44 0a 00)
>>>>DATA(d3 00 00 00 00 00 00 00 01 00 00 00)
<EOT(04)

<STX(02)MARK(23)BASE64(41417341424141645241714143534141414A6339)ETX(03)
<<DECODEBASE64(00 0b 00 04 00 1d 44 0a 80 09 20 00 00 97 3d)
<<<NUM(00)
<<<LEN(0b)
<<<DATA(00 04 00 1d 44 0a 80 09 20 00 00)
<<<CRC(97 3d)
<<<<COMMAND(00)
<<<<LEN(04 00)
<<<<NUM(1d 44 0a 80)
<<<<DATA(09 20 00 00)
>EOT(04)
 */
bool SberbankFrameLayerTest::testSendRecv() {
	layer->reset();

	// send data
	Buffer data1(32);
	TEST_NUMBER_NOT_EQUAL(0, hexToData("0013c00c001d440a00d30000000000000001000000dbd5", &data1));
	layer->sendPacket(&data1);
	TEST_HEXDATA_EQUAL("0223414250414441416452416F41307741414141414141414142414141413239553D03", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL("", result->getString());

	// STX
	uart->addRecvData(Sberbank::Control_STX);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", result->getString());

	// MARK
	uart->addRecvData(Sberbank::Control_MARK);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", result->getString());

	// data
	uart->addRecvData("41417341424141645241714143534141414A6339");
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", result->getString());

	// ETX
	uart->addRecvData(Sberbank::Control_ETX);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("<frame=000B0004001D440A8009200000973D>", result->getString());
	result->clear();

	// EOT
	uart->addRecvData(Sberbank::Control_EOT);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("<control=4>", result->getString());
	return true;
}

bool SberbankFrameLayerTest::testResponseTimeout() {
/*	// send data
	Buffer data(32);
	data.addUint8(0x01);
	data.addUint8(0x02);
	data.addUint8(0x03);
	data.addUint8(0x04);
	client->sendPacket(&data);
	TEST_HEXDATA_EQUAL("B629000401020304158A", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL("", observer->getResult());

	// first byte
	uart->addRecvData(TerminalFa::Control_FB);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", observer->getResult());

	// second byte
	uart->addRecvData(TerminalFa::Control_SB);
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", observer->getResult());

	// len
	uart->addRecvData("0005");
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", observer->getResult());

	// timeout
	timerEngine->tick(TERMINALFA_RESPONSE_TIMER);
	timerEngine->execute();
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("<error=0>", observer->getResult());
	return true;*/
	return false;
}
