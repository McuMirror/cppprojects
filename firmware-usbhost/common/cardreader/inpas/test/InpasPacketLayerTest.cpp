#include "cardreader/inpas/InpasPacketLayer.h"
#include "cardreader/inpas/InpasProtocol.h"
#include "uart/include/TestUart.h"
#include "utils/include/Hex.h"
#include "timer/include/TimerEngine.h"
#include "test/include/Test.h"
#include "logger/include/Logger.h"

class TestInpasPacketLayerObserver : public Inpas::PacketLayerObserver {
public:
	TestInpasPacketLayerObserver(StringBuilder *result) : result(result) {}
	virtual ~TestInpasPacketLayerObserver() {}

	virtual void procPacket(const uint8_t *data, const uint16_t dataLen) {
		*result << "<packet=";
		for(uint16_t i = 0; i < dataLen; i++) {
			result->addHex(data[i]);
		}
		*result << ">";
	}
	virtual void procControl(uint8_t control) {
		*result << "<control=" << control << ">";
	}
	virtual void procError(Error error) {
		*result << "<error=" << error << ">";
	}

private:
	StringBuilder *result;
};

class InpasPacketLayerTest : public TestSet {
public:
	InpasPacketLayerTest();
	bool init();
	void cleanup();
	bool testSOH();

private:
	StringBuilder *result;
	TestUart *uart;
	TimerEngine *timerEngine;
	TestInpasPacketLayerObserver *observer;
	Inpas::PacketLayer *packetLayer;

	bool gotoStateWait();
};

TEST_SET_REGISTER(InpasPacketLayerTest);

InpasPacketLayerTest::InpasPacketLayerTest() {
	TEST_CASE_REGISTER(InpasPacketLayerTest, testSOH);
}

bool InpasPacketLayerTest::init() {
	result = new StringBuilder(10240, 10240);
	timerEngine = new TimerEngine();
	uart = new TestUart(10240);
	observer = new TestInpasPacketLayerObserver(result);
	packetLayer = new Inpas::PacketLayer(timerEngine, uart);
	packetLayer->setObserver(observer);
	return true;
}

void InpasPacketLayerTest::cleanup() {
	delete packetLayer;
	delete observer;
	delete uart;
	delete timerEngine;
	delete result;
}

bool InpasPacketLayerTest::testSOH() {
	packetLayer->reset();

	// packet1 fragment1
	uart->addRecvData(
				"01FB0108000101003102010031000500"
				"3130303030040300363433060E003230"
				"3230303531363032323635330A10002A"
				"2A2A2A2A2A2A2A2A2A2A2A383934330B");
	TEST_HEXDATA_EQUAL("", uart->getSendData(), uart->getSendLen());
	TEST_STRING_EQUAL("", result->getString());

	// packet1 fragment2
	uart->addRecvData(
				"0400313830380D06003736393533370E"
				"0C003835363636363730333133300F02"
				"003030130800CEC4CEC1D0C5CDCE150E"
				"00323032303035313630323236353317"
				"02002D31190100311A02002D311B0800"
				"34303030303137321C0A003131313131"
				"3131313131270100315ADD0530784446"
				"5E5E2020202020202020202020C4C5CC"
				"CE20D0C5C6C8CC0A0A0D0A2020202020"
				"20202020202020204D6574726F204326"
				"430D0A202020202020CFD0CED6C5D1D1"
				"C8CDC3CEC2DBC920D6C5CDD2D0202020"
				"2020200D0A202020CCCED1CAC2C020D3"
				"CB2ECECAD2DFC1D0DCD1CAC0DF20C42E"
				"37322020200D0A202020202020202020"
				"20D22E203732312D33362D3231202020"
				"202020202020200D0AD7C5CA20CACBC8"
				"C5CDD2C0202020202020202020202020"
				"2020202020303139300D0A2020202020"
				"2020202020CECFCBC0D2C020CFCECAD3"
				"CFCAC80D0A31362E30352E3230202020"
				"2020202020202020202020202030323A"
				"32363A35330D0AD2C5D0CCC8CDC0CB3A"
				"20202020202020202020202020202034"
				"303030303137320D0ACAC0D0D2C02020"
				"20202020202020202020202020564953"
				"4120436C61737369630D0A2020202020"
				"2A2A2A2A202A2A2A2A202A2A2A2A6E95");
	TEST_HEXDATA_EQUAL("06", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL("", result->getString());

	// packet2
	uart->addRecvData(
				"01FB0108000101003102010032202A2A"
				"2A2A20383934330D0AD1D0CECA20C4C5"
				"C9D1D2C2C8DF203A2020202020202020"
				"2020202031382F30380D0ACACBC8C5CD"
				"D23A2020202020202020202020202020"
				"2020202020322F544553540D0A414944"
				"20202020202020202020202020202041"
				"303030303030303033313031300D0AD1"
				"D3CCCCC02028525542290D0A20202020"
				"20202020202020202020202020202020"
				"2020202020203130302E30300D0A2020"
				"20202020202020202020CEC4CEC1D0C5"
				"CDCE2020202020202020202020200D0A"
				"CACEC420CED2C2C5D2C0202020202020"
				"20202020202020202020202020203030"
				"0D0ACACEC420C0C2D2CED0C8C7C0D6C8"
				"C83A2020202020202020202037363935"
				"33370D0AB920D1D1DBCBCAC83A202020"
				"20202020202020203835363636363730"
				"333133300D0A200D0A0D0A2D2D2D2D2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D"
				"2D2D2D2D2D2D2D2D2D2D0D0A20202020"
				"202020202020202028CAC0D1D1C8D029"
				"0D0A0D0A3D3D3D3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D0D0A0A0A0A0A0A0A0A0D0A7E"
				"307844415E5E20202020202020202020"
				"20C4C5CCCE20D0C5C6C8CC0A0A0D0A20"
				"2020202020202020202020204D657472"
				"6F204326430D0A202020202020CFD0CE"
				"D6C5D1D1C8CDC3CEC2DBC920D6C5CDD2"
				"D02020202020200D0A202020CCCE3FDF");
	TEST_HEXDATA_EQUAL("06", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL("", result->getString());

	// packet3
	uart->addRecvData(
				"01FB0108000101003102010033D1CAC2"
				"C020D3CB2ECECAD2DFC1D0DCD1CAC0DF"
				"20C42E37322020200D0A202020202020"
				"20202020D22E203732312D33362D3231"
				"202020202020202020200D0AD7C5CA20"
				"CAC0D1D1C8D0C0202020202020202020"
				"2020202020202020303139300D0A2020"
				"2020202020202020CECFCBC0D2C020CF"
				"CECAD3CFCAC80D0A31362E30352E3230"
				"20202020202020202020202020202020"
				"30323A32363A35330D0AD2C5D0CCC8CD"
				"C0CB3A20202020202020202020202020"
				"202034303030303137320D0ACAC0D0D2"
				"C0202020202020202020202020202020"
				"5649534120436C61737369630D0A2020"
				"2020202A2A2A2A202A2A2A2A202A2A2A"
				"2A202A2A2A2A20383934330D0AD1D0CE"
				"CA20C4C5C9D1D2C2C8DF203A20202020"
				"202020202020202031382F30380D0ACA"
				"CBC8C5CDD23A20202020202020202020"
				"202020202020202020322F544553540D"
				"0A414944202020202020202020202020"
				"20202041303030303030303033313031"
				"300D0AD1D3CCCCC02028525542290D0A"
				"20202020202020202020202020202020"
				"202020202020202020203130302E3030"
				"0D0A202020202020202020202020CEC4"
				"CEC1D0C5CDCE20202020202020202020"
				"20200D0ACACEC420CED2C2C5D2C02020"
				"20202020202020202020202020202020"
				"202030300D0ACACEC420C0C2D2CED0C8"
				"C7C0D6C8C83A2020202020202020527E");
	TEST_HEXDATA_EQUAL("06", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL("", result->getString());

	// packet4
	uart->addRecvData(
				"01B30008000101003102010030202037"
				"36393533370D0AB920D1D1DBCBCAC83A"
				"20202020202020202020203835363636"
				"363730333133300D0A200D0A0D0A2D2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D0D0A20"
				"202020202020202020202028CAC0D1D1"
				"C8D0290D0A0D0A3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D0D0A0A0A0A0A0A0A0A"
				"0D0A7E307844455E5E5649534120436C"
				"61737369637E10BC");
	TEST_HEXDATA_EQUAL("06", uart->getSendData(), uart->getSendLen());
	uart->clearSendBuffer();
	TEST_STRING_EQUAL(
				"<packet="
				"0005003130303030040300363433060E"
				"0032303230303531363032323635330A"
				"10002A2A2A2A2A2A2A2A2A2A2A2A3839"
				"34330B0400313830380D060037363935"
				"33370E0C003835363636363730333133"
				"300F02003030130800CEC4CEC1D0C5CD"
				"CE150E00323032303035313630323236"
				"35331702002D31190100311A02002D31"
				"1B080034303030303137321C0A003131"
				"3131313131313131270100315ADD0530"
				"7844465E5E2020202020202020202020"
				"C4C5CCCE20D0C5C6C8CC0A0A0D0A2020"
				"20202020202020202020204D6574726F"
				"204326430D0A202020202020CFD0CED6"
				"C5D1D1C8CDC3CEC2DBC920D6C5CDD2D0"
				"2020202020200D0A202020CCCED1CAC2"
				"C020D3CB2ECECAD2DFC1D0DCD1CAC0DF"
				"20C42E37322020200D0A202020202020"
				"20202020D22E203732312D33362D3231"
				"202020202020202020200D0AD7C5CA20"
				"CACBC8C5CDD2C0202020202020202020"
				"2020202020202020303139300D0A2020"
				"2020202020202020CECFCBC0D2C020CF"
				"CECAD3CFCAC80D0A31362E30352E3230"
				"20202020202020202020202020202020"
				"30323A32363A35330D0AD2C5D0CCC8CD"
				"C0CB3A20202020202020202020202020"
				"202034303030303137320D0ACAC0D0D2"
				"C0202020202020202020202020202020"
				"5649534120436C61737369630D0A2020"
				"2020202A2A2A2A202A2A2A2A202A2A2A"
				"2A202A2A2A2A20383934330D0AD1D0CE"
				"CA20C4C5C9D1D2C2C8DF203A20202020"
				"202020202020202031382F30380D0ACA"
				"CBC8C5CDD23A20202020202020202020"
				"202020202020202020322F544553540D"
				"0A414944202020202020202020202020"
				"20202041303030303030303033313031"
				"300D0AD1D3CCCCC02028525542290D0A"
				"20202020202020202020202020202020"
				"202020202020202020203130302E3030"
				"0D0A202020202020202020202020CEC4"
				"CEC1D0C5CDCE20202020202020202020"
				"20200D0ACACEC420CED2C2C5D2C02020"
				"20202020202020202020202020202020"
				"202030300D0ACACEC420C0C2D2CED0C8"
				"C7C0D6C8C83A20202020202020202020"
				"3736393533370D0AB920D1D1DBCBCAC8"
				"3A202020202020202020202038353636"
				"36363730333133300D0A200D0A0D0A2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D2D0D0A"
				"20202020202020202020202028CAC0D1"
				"D1C8D0290D0A0D0A3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D3D0D0A0A0A0A0A0A0A"
				"0A0D0A7E307844415E5E202020202020"
				"2020202020C4C5CCCE20D0C5C6C8CC0A"
				"0A0D0A20202020202020202020202020"
				"4D6574726F204326430D0A2020202020"
				"20CFD0CED6C5D1D1C8CDC3CEC2DBC920"
				"D6C5CDD2D02020202020200D0A202020"
				"CCCED1CAC2C020D3CB2ECECAD2DFC1D0"
				"DCD1CAC0DF20C42E37322020200D0A20"
				"202020202020202020D22E203732312D"
				"33362D3231202020202020202020200D"
				"0AD7C5CA20CAC0D1D1C8D0C020202020"
				"20202020202020202020202020303139"
				"300D0A20202020202020202020CECFCB"
				"C0D2C020CFCECAD3CFCAC80D0A31362E"
				"30352E32302020202020202020202020"
				"202020202030323A32363A35330D0AD2"
				"C5D0CCC8CDC0CB3A2020202020202020"
				"2020202020202034303030303137320D"
				"0ACAC0D0D2C020202020202020202020"
				"20202020205649534120436C61737369"
				"630D0A20202020202A2A2A2A202A2A2A"
				"2A202A2A2A2A202A2A2A2A2038393433"
				"0D0AD1D0CECA20C4C5C9D1D2C2C8DF20"
				"3A20202020202020202020202031382F"
				"30380D0ACACBC8C5CDD23A2020202020"
				"2020202020202020202020202020322F"
				"544553540D0A41494420202020202020"
				"20202020202020204130303030303030"
				"3033313031300D0AD1D3CCCCC0202852"
				"5542290D0A2020202020202020202020"
				"20202020202020202020202020202031"
				"30302E30300D0A202020202020202020"
				"202020CEC4CEC1D0C5CDCE2020202020"
				"202020202020200D0ACACEC420CED2C2"
				"C5D2C020202020202020202020202020"
				"2020202020202030300D0ACACEC420C0"
				"C2D2CED0C8C7C0D6C8C83A2020202020"
				"20202020203736393533370D0AB920D1"
				"D1DBCBCAC83A20202020202020202020"
				"203835363636363730333133300D0A20"
				"0D0A0D0A2D2D2D2D2D2D2D2D2D2D2D2D"
				"2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D"
				"2D2D2D0D0A2020202020202020202020"
				"2028CAC0D1D1C8D0290D0A0D0A3D3D3D"
				"3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D"
				"3D3D3D3D3D3D3D3D3D3D3D3D3D0D0A0A"
				"0A0A0A0A0A0A0D0A7E307844455E5E56"
				"49534120436C61737369637E>", result->getString());
	result->clear();
	return true;
}
