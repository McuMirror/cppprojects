#include "InpasCommandLayer.h"
#include "InpasProtocol.h"

#include "mdb/master/cashless/MdbMasterCashless.h"
#include "utils/include/DecimalPoint.h"
#include "utils/include/CodePage.h"
#include "logger/include/Logger.h"

#include <string.h>

#define INPAS_QR_HEADER_SIZE (QR_HEADER_SIZE + 1 + QR_FOOTER_SIZE)
#define INPAS_QR_TEXT_SIZE (3 + QR_TEXT_SIZE + 1)

namespace Inpas {

CommandLayer::CommandLayer(
	Mdb::DeviceContext *context,
	PacketLayerInterface *packetLayer,
	TcpIp *conn,
	TimerEngine *timers,
	EventEngineInterface *eventEngine
) :
	context(context),
	packetLayer(packetLayer),
	deviceLan(packetLayer, conn),
	timers(timers),
	eventEngine(eventEngine),
	deviceId(eventEngine),
	commandQueue(4),
	packet(20),
	req(INPAS_PACKET_SIZE),
	qrCodeHeader(INPAS_QR_HEADER_SIZE, INPAS_QR_HEADER_SIZE),
	qrCodeData(INPAS_QR_TEXT_SIZE, INPAS_QR_TEXT_SIZE),
	terminalId(16, 16)
{
	this->context->setStatus(Mdb::DeviceContext::Status_NotFound);
	this->context->setState(State_Idle);
	this->context->init(2, 1);
	this->packetLayer->setObserver(this);
	this->timer = timers->addTimer<CommandLayer, &CommandLayer::procTimer>(this);
}

CommandLayer::~CommandLayer() {
	timers->deleteTimer(this->timer);
}

EventDeviceId CommandLayer::getDeviceId() {
	return deviceId;
}

void CommandLayer::reset() {
	LOG_INFO(LOG_ECL, "reset");
	context->setStatus(Mdb::DeviceContext::Status_NotFound);
	context->setManufacturer((uint8_t*)INPAS_MANUFACTURER, sizeof(INPAS_MANUFACTURER));
	context->setModel((uint8_t*)INPAS_MODEL, sizeof(INPAS_MODEL));
	context->incResetCount();
	commandQueue.clear();
	packetLayer->reset();
#if 1
	gotoStateInitDelay();
#else
	gotoStateWait();
#endif
}

void CommandLayer::disable() {
	LOG_INFO(LOG_ECL, "disable");

}

void CommandLayer::enable() {
	LOG_INFO(LOG_ECL, "enable");

}

bool CommandLayer::sale(uint16_t productId, uint32_t productPrice) {
	LOG_INFO(LOG_ECL, "sale " << productId << "," << productPrice);
	if(context->getState() < State_Wait) {
		LOG_ERROR(LOG_ECL, "Wrong state " << context->getState());
		return false;
	}

	this->productPrice = productPrice;

	if(context->getState() != State_Wait && context->getState() != State_Session) {
		this->commandQueue.push(Command_VendRequest);
		return true;
	}

	gotoStateRequest();
	return true;
}

bool CommandLayer::saleComplete() {
	LOG_INFO(LOG_ECL, "saleComplete");
	if(context->getState() == State_Idle) {
		return false;
	}

	timer->start(1);
	context->setState(State_Closing);
	return true;
}

bool CommandLayer::saleFailed() {
	LOG_INFO(LOG_ECL, "saleFailed");
	if(context->getState() == State_Idle) {
		return false;
	}

	gotoStatePaymentCancel();
	return true;
}

bool CommandLayer::closeSession() {
	LOG_INFO(LOG_ECL, "closeSession");
	if(context->getState() == State_Idle) {
		return false;
	}

	if(context->getState() != State_Wait) {
		this->commandQueue.push(Command_SessionComplete);
		return true;
	}

	gotoStateClosing();
	return true;
}

//char qrText[] = "0xDF^^https://en.wikipedia.org/wiki/Thorax~";
bool CommandLayer::printQrCode(const char *header, const char *footer, const char *text) {
	LOG_INFO(LOG_ECL, "printQrCode");
	if(context->getState() == State_Idle) {
		return false;
	}

	qrCodeData.clear();
	qrCodeData << "0xDF^^" << text << "~";
	qrCodeHeader.clear();
	qrCodeHeader << header << "\n" << footer;
	LOG_INFO(LOG_ECL, "qrCodeHeader=" << qrCodeHeader.getString() << qrCodeHeader.getLen());
	LOG_INFO(LOG_ECL, "qrCodeData=" << qrCodeData.getString() << qrCodeData.getLen());

	if(context->getState() != State_Wait) {
		this->commandQueue.push(Command_QrCode);
		return true;
	}

	gotoStateQrCode();
	return true;
}

bool CommandLayer::verification() {
	LOG_DEBUG(LOG_ECL, "verification");
	if(context->getState() == State_Idle) {
		return false;
	}

	if(context->getState() != State_Wait) {
		this->commandQueue.push(Command_Verification);
		return true;
	}

	gotoStateVerification();
	return true;
}

void CommandLayer::procPacket(const uint8_t *data, const uint16_t dataLen) {
	LOG_DEBUG(LOG_ECL, "procPacket");
	LOG_TRACE_HEX(LOG_ECL, data, dataLen);
	if(packet.parse(data, dataLen) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		LOG_ERROR_HEX(LOG_ECL, data, dataLen);
		context->incProtocolErrorCount();
		return;
	}

	uint16_t operation;
	if(packet.getNumber(Tlv_OperationCode, &operation) == true) {
		if(operation == Operation_Net) {
			LOG_DEBUG(LOG_ECL, "Operation net");
			deviceLan.procRequest(&packet);
			return;
		}
	}

	switch(context->getState()) {
	case State_Init: stateInitPacket(); break;
	case State_Wait: stateWaitPacket(); break;
	case State_Approving: stateApprovingPacket(); break;
	case State_PaymentCancelWait: statePaymentCancelWaitPacket(); break;
	case State_QrCodeWait: stateQrCodeWaitPacket(); break;
	case State_Verification: stateVerificationPacket(); break;
	default: LOG_ERROR(LOG_ECL, "Unwaited data " << context->getState());
	}
}

void CommandLayer::procControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "procControl");
	switch(context->getState()) {
	case State_Init: stateInitControl(control); break;
	case State_Session: stateSessionControl(control); break;
	case State_Request: stateRequestControl(control); break;
	case State_Approving: stateApprovingControl(control); break;
	case State_PaymentCancel: statePaymentCancelControl(control); break;
	case State_PaymentCancelWait: statePaymentCancelWaitControl(control); break;
	case State_QrCode: stateQrCodeControl(control); break;
	case State_Verification: stateVerificationControl(control); break;
	default: LOG_ERROR(LOG_ECL, "Unwaited data " << context->getState() << "," << control);
	}
}

void CommandLayer::procError(Error error) {
	LOG_DEBUG(LOG_ECL, "procError " << error);
}

void CommandLayer::procTimer() {
	LOG_DEBUG(LOG_ECL, "procTimer");
	switch(context->getState()) {
	case State_Init: stateInitTimeout(); break;
	case State_InitDelay: stateInitDelayTimeout(); break;
	case State_Wait: stateWaitTimeout(); break;
	case State_Session: stateSessionTimeout(); break;
	case State_Request: stateRequestTimeout(); break;
	case State_Approving: stateApprovingTimeout(); break;
	case State_PaymentCancel: statePaymentCancelTimeout(); break;
	case State_PaymentCancelWait: statePaymentCancelWaitTimeout(); break;
	case State_Closing: stateClosingTimeout(); break;
	case State_QrCode: stateQrCodeTimeout(); break;
	case State_QrCodeWait: stateQrCodeWaitTimeout(); break;
	case State_Verification: stateVerificationTimeout(); break;
	default: LOG_ERROR(LOG_ECL, "Unwaited timeout " << context->getState());
	}
}

/*
00:02<19020032361B0000 CHECK LINK
1902003236 oper=26
1B0000

00:08>0800010100310201003119020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B5BE70A43413A2D2D2D2D2D424547494E2043455254494649434154452D2D2D2D2D0D0A4D494944597A4343416B7567
0800
01010031
02010031
1902003633 oper=63
40010031 mode=1
4102003136 type=16
4615003139352E3230302E3230392E31303B31353434343B data=195.200.209.10;15444;
5BE70A cmd=91,len=2791

00:24<1902003633410200313643010030 CONNECT OK
1902003633 oper=63
4102003136 type=16
43010030 result=0

00:27>1902003633400100304102003137467D00007B04207224058022C08013192200021390083621486000000000000000250007311351590001222108007204020027323230303032313339303038333632313438363D323130383230313638383434353138303131313131313120202020202020202006430004303230300011303038535633303930313227574859
1902003633 SEND DATA
40010030
4102003137 type=17
467D00 data=[len=125]
007B04207224058022C08013192200021390083621486000000000000000250007311351590001222108007204020027323230303032313339303038333632313438363D323130383230313638383434353138303131313131313120202020202020202006430004303230300011303038535633303930313227574859

00:27<1902003633410200313743010030
1902003633 SEND DATA OK
4102003137 type=17
43010030

00:27>1902003633400100314102003137
1902003633 RECV DATA
40010031
4102003137

00:34<1902003633410200313743010031
1902003633
4102003137
43010031 error

00:34>1902003633400100314102003137















305CBE014B1532919AD345A19BE3F0CC131CCBB1B11F4AD7AAAC8F2C25A4D6704370DD2FFCDE43CA477BB53281987B7EAF6D350E00DF4C9DC9EB5C7506300FF7F50C3E94EA678365623C8B84618C71D0E34A800BB8671159098264FDC148
19:25<20
19:25<08
19:25>02
19:25>0E
19:25>00
19:25>1902003633400100314102003137
19:25>8EA6
19:25<06
19:25<02
19:25<00
19:25<02

19:25<6D
19:25<20
19:25>02
19:25>0E
19:25>00
19:25>1902003633400100314102003137
19:25>8EA6
19:25<06
19:25<02
19:25<D3
19:25<01
19:25<190200363341020031374301003046C201174104E7A99B4C3118627D5209D470DE16FD8BFD590B529E54A561244227DDA37F565E4BBA40D65A37C4DA9C3DCAE13F226F109B937AABE5892E3FC36961C3ACEC4F4A060101002048A7785CB5D5151EA2376BFC379754BD418666E2B1D548D8F53AED81DA01AC2C867FC8FE9ED890A6A0340E76261B091D1A6BAC83C13CE049FC19F8F56C18D1DAF440B11F83E561866824E186153FE3AF1EBBE82D7DDF7A0033D621AFB7722F2D9B429927E6E37AC52628950459A5A2BED15899057A48B2CE562EC8ECC601CA2230EA8AB63CFEDFE4573EC792E3E2ABF12B41B732B938CFBC40C1B14C86A0D83936DF664F0515CAA8C744082A1536BB2C1B08AC72B1D5C7B7CBBE145F3605D7A12CB05607BDDF5338925E9372E2E3694287232250F69775E68A7BA1FBA0E2714A4D44458C0EDD797191C6A535AFD837262331C7419C419A6395E4CE4598C28D16030300760D00006E03010240001E060106020603050105020503040104020403030103020303020102020203004800463044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F742063657274696669636174650E000000
19:25<0A
19:25<24
19:26>01
19:26>EF
19:26>01

19:26>8D4E
19:26<06
19:26>01
19:26>EF
19:26>01

19:26>5ADA
19:26<06
19:26>01
19:26>EF
19:26>01

19:26>7C87
19:26<06
19:26>01
19:26>EF
19:26>01

19:26>4C0A
19:26<06
19:26>01
19:26>40
19:26>01
19:26>0800010100310201003001010080BE03D88A5D4874A2FA724845783AD21F7B45F5410D00EDFDEE5C6DC1D83DBF444536AEA9FF4B27382896660DC441F2159AE9636E0D039ED446061D29ED481179405D3B30447C0B67E8A9FD78CE50717A3921321AFBB5C6D6D74CB57E2EF01B3740116DE40D78C2BACE743F0E93AFBE2DE7CB8AF760E39E1BBA376E1DABDA074389EA2440C50B7D58D2A9342ECC5B5BB8A707072A5254FC8B7D9BAED34925148235A5C8F4668F7B74383B9D489B14087BCED2302CD02B282F19074492A93BAFFC373DBA86D81CCBC382A646978931EC15FF76E046C23DCF59640B8A2ECE7CE3F57F71C76EB2A0B48B3F2DFC1BDACAEDC95C35F881D226C69BC4721E282F6D8D1403030001011603030028BF2F376F39C34ACC96E046C3B89F998B04DE60E2F53AC8EF0D9B6AAB5168FBE90CCADE20223B56D1
19:26>13A6
19:26<06
19:28<02
19:28<0E
19:28<00
19:28<1902003633410200313743010030
19:28<9D
19:28<47

20:24>02 //CREDIT=50000
20:24>17
20:24>00
20:24>0005003530303030040300363433560600323031303030
0005003530303030=CREDIT=50000
040300363433
560600323031303030
20:24>F997
20:24<06

20:28<02 //VENDREQUEST=2500
20:28<15
20:28<00
20:28<000800303030303235303004030036343319010031
0008003030303032353030=2500=>VENDREQUEST=2500
040300363433
19010031
20:28<3A
20:28<29

20:35>02 //CONNECTTO=195.200.209.10;15444;
20:35>26
20:35>00
20:35>19020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B
1902003633
40010031
4102003136
4615003139352E3230302E3230392E31303B31353434343B
20:35>C3C8
20:35<06

21:58>02 //CREDIT=50000
21:58>17
21:58>00
21:58>0005003530303030040300363433560600323031303030
0005003530303030
040300363433
560600323031303030
21:58>F997
21:58<06

31:34>8D4E
31:34<06
31:34>01
31:34>EF
31:34>01

31:34>5ADA
31:34<06
31:34>01
31:34>EF
31:34>01

31:34>7C87
31:34<06
31:34>01
31:34>EF
31:34>01
31:34>08000101003102010034B3E7313639991A4D1910B64D4E0202DB876F0C66C3EE0D763AD137AA65B1F924369A5D270203010001A351304F300B0603551D0F040403020186300F0603551D130101FF040530030101FF301D0603551D0E041604146264DDAEA379CA1755D07ABF917604A87C190484301006092B06010401823715010403020100300D06092A864886F70D01010B050003820101002A40F964ECD68F7FB8F37CB671370E0BF2DE29381F8C704924030715FC1A6239668740AD10679C2D53A9814661AEB2F65D834295391ED54E885333759FC575FB90D26655320707019DF76D28F0DFCE27561DDC7B7B5E0F6BB2C82F74B5455A2569EC818C78868D1BC67F8D18819CCE32D5A8412399EEA36630B2A533072CC42BEA7A9AAB0F0AE5B8B1738A1C05EB4D8E454B4B3C9E7CF8980785B05D3D6721063E578927AE8C8B9C9C9EF1419837BF60674229F2870A5EA765276551BB9949FE3A98F6363FC5C9684F8C3EB2187564356EA0C8B66DABD5620C387E145EBDAC3BABB80ACEF0C40482EB3985D0AA9D578CE25722F74ECBA59E8F63ACC1A6220440160303004610000042410426FA10096CC7631E4CFA4BF241211DF13AA07C4C47E8B513F0F3A18E106A1EF428FA92459BD9759FA510567230F5EBC78CAE8750F63575193B90FF743E901E0516030301080F00010406
31:34>DE66
31:34<06
31:34>01
31:34>40
31:34>01
31:34>080001010031020100300101001D37F6FBC8F96B612777D631CACDD39FE39B8047EBD706E8A2281AC7847B62B33E66B20F6B69D78DB2C193AF9ADE8EF57CD91F13FD0F363ED252FE50F5BAD6494E1CBB0820C36C334AC627759CBC5D3A11F52B63C4B2D8962F15FB3BA40F9526E1585DF28A3AC783C2C7E21C87F0288116E82807BA0D2747A8DC7C56C7DAA436CA8DA0B01D073F5AE1BAAAB61981C66C44AF4335DC746401772D8CA2F1EBA984C1DD5A2007FD5DDD9C570DCD2464AF2D97ECB53A10FED86F1E9C91378096B904AE9384A9DD60DE2C157083CD682749ED5627B4F22368D3F3C157F5BE0DAC91EE5378B7BB4AA5E926604858126C966EE7B5E8636FCE0EECEF99D9A83BE34F05FB1403030001011603030028C5483774A2606AA0057926B2BF2675C7CDDFD0A726B682DE6720994521B9C31DE42A11B4411A8DED
31:34>141A
31:34<06
31:35<02
31:35<0E
31:35<00
31:35<1902003633410200313743010030
31:35<9D
31:35<47











15:41>02 CREDIT=50000
15:41>17
15:41>00
15:41>0005003530303030040300363433560600323031303030
0005003530303030
04030036343
3560600323031303030
15:41>F997
15:41<06

16:14>02 CREDIT=50000
16:14>17
16:14>00
16:14>0005003530303030040300363433560600323031303030
0005003530303030
04030036343
3560600323031303030
16:14>F997
16:14<06

16:17<02 VENDREQUEST=2500
16:17<15
16:17<00
16:17<000800303030303235303004030036343319010031
0008003030303032353030
040300363433
19010031
16:17<3A
16:17<29

16:19>02 CONNECT=195.200.209.10;15444;
16:19>26
16:19>00
16:19>19020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B
1902003633
40010031
4102003136
4615003139352E3230302E3230392E31303B31353434343B
16:19>C3C8
16:19<06









17:33>02 CREDIT=50000
17:33>17
17:33>00
17:33>0005003530303030040300363433560600323031303030
0005003530303030
040300363433
560600323031303030
17:33>F997
17:33<06

17:35<02 VENDREQUEST=2500
17:35<15
17:35<00
17:35<000800303030303235303004030036343319010031
0008003030303032353030
040300363433
19010031
17:35<3A
17:35<29

17:38>02 CONNECT=195.200.209.10;15444;
17:38>26
17:38>00
17:38>19020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B
1902003633
40010031
4102003136
4615003139352E3230302E3230392E31303B31353434343B
17:38>C3C8
17:38<06

17:39<02 CONNECT=OK
17:39<0E
17:39<00
17:39<1902003633410200313643010030
1902003633
4102003136
43010030
17:39<1D
17:39<3C

17:39>02 SENDDATA=[LEN=278]
17:39>27
17:39>01

1902003633
40010030=>SEND
4102003137
461601

17:39>4F5C
17:39<06

17:39<02 SENDDATA=OK
17:39<0E
17:39<00
17:39<1902003633410200313743010030
1902003633
4102003137
43010030
17:39<9D
17:39<47

17:39>02 RECVDATA=
17:39>0E
17:39>00
17:39>1902003633400100314102003137
1902003633
40010031
4102003137
17:39>8EA6
17:39<06

17:39<02 RECVDATA=[LEN=239]
17:39<00
17:39<02

1902003633
4102003137
43010030
46EF01160303005902000055030343D03EDD4E108FF2498593288D7BC7D362C39CB6A64BFB8629424E98322F629A20B435BC9BED8E477A0BAD969B66286491B11726BFF17128383ACE5566C863B11BC03000000DFF01000100000B000403000102160303074E0B00074A0007470003DA308203D6308202BEA00302010202131B00000014EF40BB0F52339ACA000000000014300D06092A864886F70D01010B05003044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F74206365727469666963617465301E170D3135303830363131333033355A170D3235303830363131343033355A30819D310B3009060355040613025255311B30190603550408131252657075626C6963206F66204372696D6561311330110603550407130A53656D6665726F706F6C31173015060355040A130E524E43422042414E4B20504A5343310B3009060355040B13024954311730150603550403130E5261647761726520736572766572311D301B06092A864886F70D010901160E73736C73727640726E63622E727530820122300D06092A864886F70D01010105000382010F003082010A0282010100D6992924CC5232F345B24E505B3C8E632A81BB1C8493E27BB4A31676EC544452FC889C1722E0C9168BDE
17:39<EA
17:39<12

17:39>02 RECVDATA=
17:39>0E
17:39>00
17:39>1902003633400100314102003137
1902003633
40010031
4102003137
17:39>8EA6
17:39<06

17:40<02 RECVDATA=[LEN=239]
17:40<00
17:40<02
17:40<190200363341020031374301003046EF015FD1BF706D3F08CE1C87ECB3FE4BEF99C99EE915ECDAC5AC1E2EB3D672296565252A6C7F9D8C364870B91E14EDF7D9E5CDE4548151E6D9270221CE8E5C64ADAA01916CE35AA1B80CE41015AC22A0345B1379171CD4BEB8C3425C82939583F6C6A29C88438F6A4F5701F6F668732C2E4B3DA0DA5F7E42DB23B806923AE0C957E1BBEFE4A8E9E1126A2497792E437E7334F9CFB2D4BA8FE66EBBC8617A4A80F724E0156DCEB071E851DB82C90F22490752FA091698E483E5D85D108E04D982F6A9FEB590907918D59B37CA271FF4B6570368DEAB2431D90203010001A3673065300E0603551D0F0101FF0404030204F030130603551D25040C300A06082B06010505070301301D0603551D0E041604140F076B94F8BB9F1A64204BC5CB61095FAEAF99B3301F0603551D230418301680146264DDAEA379CA1755D07ABF917604A87C190484300D06092A864886F70D01010B050003820101001712B803E21ACE1B76F601E94802EE74EE8EFADAF030F1E610C839F8D439B6FB52A408BFFA20A13F3F7E9DB8A5E6EC0340E140731CDA797E1D159818E9B4B7A1B61217AD0118C888D797C96C7FABADFFF22541F0C05D5B003EFAF4239ECD5F78CCEDF26F4ED8CFC0970DB5C615A9BFBF870D40C10D243991BA700F91C839DE5AEAD62C3A12CD144822C1C14BCFF75B3885A248B4A310EA
1902003633
4102003137
43010030
46EF015FD1BF706D3F08CE1C87ECB3FE4BEF99C99EE915ECDAC5AC1E2EB3D672296565252A6C7F9D8C364870B91E14EDF7D9E5CDE4548151E6D9270221CE8E5C64ADAA01916CE35AA1B80CE41015AC22A0345B1379171CD4BEB8C3425C82939583F6C6A29C88438F6A4F5701F6F668732C2E4B3DA0DA5F7E42DB23B806923AE0C957E1BBEFE4A8E9E1126A2497792E437E7334F9CFB2D4BA8FE66EBBC8617A4A80F724E0156DCEB071E851DB82C90F22490752FA091698E483E5D85D108E04D982F6A9FEB590907918D59B37CA271FF4B6570368DEAB2431D90203010001A3673065300E0603551D0F0101FF0404030204F030130603551D25040C300A06082B06010505070301301D0603551D0E041604140F076B94F8BB9F1A64204BC5CB61095FAEAF99B3301F0603551D230418301680146264DDAEA379CA1755D07ABF917604A87C190484300D06092A864886F70D01010B050003820101001712B803E21ACE1B76F601E94802EE74EE8EFADAF030F1E610C839F8D439B6FB52A408BFFA20A13F3F7E9DB8A5E6EC0340E140731CDA797E1D159818E9B4B7A1B61217AD0118C888D797C96C7FABADFFF22541F0C05D5B003EFAF4239ECD5F78CCEDF26F4ED8CFC0970DB5C615A9BFBF870D40C10D243991BA700F91C839DE5AEAD62C3A12CD144822C1C14BCFF75B3885A248B4A310EA
17:40<3B
17:40<50

17:40>02 RECVDATA=
17:40>0E
17:40>00
17:40>1902003633400100314102003137
1902003633
40010031
4102003137
17:40>8EA6
17:40<06

17:40<02 RECVDATA=[LEN=82]
17:40<63
17:40<01
17:40<1902003633410200313743010030465201EEC77BEC1ADB92BA64E8CC9C3CF443D851C8630FEB1CBB69C39886F57BCDF62B3F9B44559312884B5BA54507092F91C555FDF6A26FD9C07FDDFD517E5F4F50E0626445B47D6F1E1D1513AB21FAF4EB75ECA4B71C2070E57BB173F0C3806C3E2BB63B519E4539CC01A1000367308203633082024BA00302010202105E2C939EF5AB5BAB4C131161E07743CA300D06092A864886F70D01010B05003044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F74206365727469666963617465301E170D3135303731343038333131325A170D3330303731343038343131315A3044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F7420636572746966696361746530820122300D06092A864886
1902003633
4102003137
43010030
465201EEC77BEC1ADB92BA64E8CC9C3CF443D851C8630FEB1CBB69C39886F57BCDF62B3F9B44559312884B5BA54507092F91C555FDF6A26FD9C07FDDFD517E5F4F50E0626445B47D6F1E1D1513AB21FAF4EB75ECA4B71C2070E57BB173F0C3806C3E2BB63B519E4539CC01A1000367308203633082024BA00302010202105E2C939EF5AB5BAB4C131161E07743CA300D06092A864886F70D01010B05003044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F74206365727469666963617465301E170D3135303731343038333131325A170D3330303731343038343131315A3044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F7420636572746966696361746530820122300D06092A864886
17:40<80
17:40<38

17:40>02 RECVDATA=
17:40>0E
17:40>00
17:40>
1902003633
40010031
4102003137
17:40>8EA6
17:40<06

17:40<02 RECVDATA=[LEN=495]
17:40<00
17:40<02

1902003633
4102003137
43010030

17:40<6A
17:40<55

17:40>02 RECVDATA=
17:40>0E
17:40>00
17:40>1902003633400100314102003137
1902003633
40010031
4102003137
17:40>8EA6
17:40<06

17:40<02 RECVDATA=[LEN=495]
17:40<00
17:40<02
17:40<190200363341020031374301003046EF01CE32D5A8412399EEA36630B2A533072CC42BEA7A9AAB0F0AE5B8B1738A1C05EB4D8E454B4B3C9E7CF8980785B05D3D6721063E578927AE8C8B9C9C9EF1419837BF60674229F2870A5EA765276551BB9949FE3A98F6363FC5C9684F8C3EB2187564356EA0C8B66DABD5620C387E145EBDAC3BABB80ACEF0C40482EB3985D0AA9D578CE25722F74ECBA59E8F63ACC1A6220440160303014D0C0001490300174104E7A99B4C3118627D5209D470DE16FD8BFD590B529E54A561244227DDA37F565E4BBA40D65A37C4DA9C3DCAE13F226F109B937AABE5892E3FC36961C3ACEC4F4A0601010096A9C7748A02125B0C35A0CD7A7943F47A26C8A85137BE1151BA36D0388F5B560E147E9BE80130C768384BCD27C70F661FFDC0C56952FFF19924B41FE88876D8A5DDE56904F358847671BBB2FB33F3B9AB55FE838A4E9445459B00B4AD7198970D751B8B1051287B821F87A52DF9575496796F0E8B0C46CD33173E53D59E5793E3920CB2C134595CF0A5C506C698CA829F95B3105CCEAA8032214536C88F76B0BF5BCB59CA585513784F5C0FA14D578364129E985C26D672C119E9CB19D243AEDA5E2F056EA6626274AB4E2F00C2AFA355DC4F03F59D9D79F4F844049D5605BF23F70BDEB83D002B127C03D864A9F5780C89EE55D714ADF041E35BD132D1498116030300760D00006E0301
1902003633
4102003137
43010030
46EF01CE32D5A8412399EEA36630B2A533072CC42BEA7A9AAB0F0AE5B8B1738A1C05EB4D8E454B4B3C9E7CF8980785B05D3D6721063E578927AE8C8B9C9C9EF1419837BF60674229F2870A5EA765276551BB9949FE3A98F6363FC5C9684F8C3EB2187564356EA0C8B66DABD5620C387E145EBDAC3BABB80ACEF0C40482EB3985D0AA9D578CE25722F74ECBA59E8F63ACC1A6220440160303014D0C0001490300174104E7A99B4C3118627D5209D470DE16FD8BFD590B529E54A561244227DDA37F565E4BBA40D65A37C4DA9C3DCAE13F226F109B937AABE5892E3FC36961C3ACEC4F4A0601010096A9C7748A02125B0C35A0CD7A7943F47A26C8A85137BE1151BA36D0388F5B560E147E9BE80130C768384BCD27C70F661FFDC0C56952FFF19924B41FE88876D8A5DDE56904F358847671BBB2FB33F3B9AB55FE838A4E9445459B00B4AD7198970D751B8B1051287B821F87A52DF9575496796F0E8B0C46CD33173E53D59E5793E3920CB2C134595CF0A5C506C698CA829F95B3105CCEAA8032214536C88F76B0BF5BCB59CA585513784F5C0FA14D578364129E985C26D672C119E9CB19D243AEDA5E2F056EA6626274AB4E2F00C2AFA355DC4F03F59D9D79F4F844049D5605BF23F70BDEB83D002B127C03D864A9F5780C89EE55D714ADF041E35BD132D1498116030300760D00006E0301
17:40<66
17:40<64

17:40>02 RECVDATA=
17:40>0E
17:40>00
17:40>1902003633400100314102003137
1902003633
40010031
4102003137
17:40>8EA6
17:40<06

17:40<02 RECVDATA=[LEN=112]
17:40<81
17:40<00
17:40<19020036334102003137430100304670000240001E060106020603050105020503040104020403030103020303020102020203004800463044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F742063657274696669636174650E000000
1902003633
4102003137
43010030
4670000240001E060106020603050105020503040104020403030103020303020102020203004800463044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F742063657274696669636174650E000000
17:40<57
17:40<4C

17:41>01 SENDDATA=[LEN=2233]
17:41>EF
17:41>01

0800
01010031
02010031
1902003633
40010030
4102003137


17:41>8D4E
17:41<06

17:41>01
17:41>EF
17:41>01

17:41>5ADA
17:41<06
17:41>01
17:41>EF
17:41>01

17:41>7C87
17:41<06
17:41>01
17:41>EF
17:41>01

17:41>1F20
17:41<06
17:41>01
17:41>40
17:41>01
17:41>080001010031020100300101008CBE0680D075E8D1D81BB0632F814FBB993C29F76D78F508F595AA36260BA7235FA0542A42E2E191746C1B462048266C8EBA80C37B3730925AF476B97BE38DBF43567908A9D41685F7B3B7D799D11EA7330519D2FBC86B1B9CFCC2C9D1966D5970DDA9891C4C1A26D11ABED169639839D7783CEBC53A9DFA23A081F096DCE19B0D02A1CFFC12037F0A3DB3C805706E9ECC95320EF2B3FC05CEEBEC87E42FE1E11DC929883A7B49C68582ED0964F913FBA15FEBB36EEE8F77DFCBE60FF6C2748CDA86DF1BD8188BC5EFF83BEDBAD7A1070E1AD1C6F1402EA303FD9202703453149AEFC68DB87AC671B167893A946A3986E66A17F2215909DDD7805CCCAAF3FC531403030001011603030028ADF5E11850BF265805249589DDEDE4592097A454FB0DFB2CA32F79F9FC8CDF4E6DC7393221114AA3
17:41>AD5D
17:41<06

17:43<02 SENDDATA=OK
17:43<0E
17:43<00
17:43<1902003633410200313743010030
1902003633
4102003137
43010030
17:43<9D
17:43<47

No response



17:59>02 CREDIT=50000
17:59>17
17:59>00
17:59>0005003530303030040300363433560600323031303030
0005003530303030
040300363433
560600323031303030
17:59>F997
17:59<06
18:02<02
18:02<15
18:02<00
18:02<000800303030303235303004030036343319010031
18:02<3A
18:02<29
18:04>02
18:04>26
18:04>00
18:04>19020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B
18:04>C3C8
18:04<06
19:18>02
19:18>17
19:18>00
19:18>0005003530303030040300363433560600323031303030
19:18>F997
19:18<06
19:20<02
19:20<15
19:20<00
19:20<000800303030303235303004030036343319010031
19:20<3A
19:20<29
19:23>02
19:23>26
19:23>00
19:23>19020036334001003141020031364615003139352E3230302E3230392E31303B31353434343B
19:23>C3C8
19:23<06
19:24<02
19:24<0E
19:24<00
19:24<1902003633410200313643010030
19:24<1D
19:24<3C
19:24>02
19:24>27
19:24>01

19:24>7FDE
19:24<06
19:24<02
19:24<0E
19:24<00
19:24<1902003633410200313743010030
19:24<9D
19:24<47
19:24>02
19:24>0E
19:24>00
19:24>1902003633400100314102003137
19:24>8EA6
19:24<06
19:25<02
19:25<00
19:25<02
19:25<190200363341020031374301003046EF011603030059020000550303238F85312CD8A0A17B77F6D06C5557583260D57DB496AD0001F296BEF3DA55F320C447DBC39B8A8495339DA8292AF3A89C01C41ACCAE5DF924492579FD60679104C03000000DFF01000100000B000403000102160303074E0B00074A0007470003DA308203D6308202BEA00302010202131B00000014EF40BB0F52339ACA000000000014300D06092A864886F70D01010B05003044310B300906035504061302525531173015060355040A130E524E43422042414E4B20504A5343311C301A06035504031313434120526F6F74206365727469666963617465301E170D3135303830363131333033355A170D3235303830363131343033355A30819D310B3009060355040613025255311B30190603550408131252657075626C6963206F66204372696D6561311330110603550407130A53656D6665726F706F6C31173015060355040A130E524E43422042414E4B20504A5343310B3009060355040B13024954311730150603550403130E5261647761726520736572766572311D301B06092A864886F70D010901160E73736C73727640726E63622E727530820122300D06092A864886F70D01010105000382010F003082010A0282010100D6992924CC5232F345B24E505B3C8E632A81BB1C8493E27BB4A31676EC544452FC889C1722E0C9168BDE
19:25<1B
19:25<61
19:25>02
19:25>0E
19:25>00
19:25>1902003633400100314102003137
19:25>8EA6
19:25<06
19:25<02
19:25<00
19:25<02
19:25<190200363341020031374301003046EF015FD1BF706D3F08CE1C87ECB3FE4BEF99C99EE915ECDAC5AC1E2EB3D672296565252A6C7F9D8C364870B91E14EDF7D9E5CDE4548151E6D9270221CE8E5C64ADAA01916CE35AA1B80CE41015AC22A0345B1379171CD4BEB8C3425C82939583F6C6A29C88438F6A4F5701F6F668732C2E4B3DA0DA5F7E42DB23B806923AE0C957E1BBEFE4A8E9E1126A2497792E437E7334F9CFB2D4BA8FE66EBBC8617A4A80F724E0156DCEB071E851DB82C90F22490752FA091698E483E5D85D108E04D982F6A9FEB590907918D59B37CA271FF4B6570368DEAB2431D90203010001A3673065300E0603551D0F0101FF0404030204F030130603551D25040C300A06082B06010505070301301D0603551D0E041604140F076B94F8BB9F1A64204BC5CB61095FAEAF99B3301F0603551D230418301680146264DDAEA379CA1755D07ABF917604A87C190484300D06092A864886F70D01010B050003820101001712B803E21ACE1B76F601E94802EE74EE8EFADAF030F1E610C839F8D439B6FB52A408BFFA20A13F3F7E9DB8A5E6EC0340E140731CDA797E1D159818E9B4B7A1B61217AD0118C888D797C96C7FABADFFF22541F0C05D5B003EFAF4239ECD5F78CCEDF26F4ED8CFC0970DB5C615A9BFBF870D40C10D243991BA700F91C839DE5AEAD62C3A12CD144822C1C14BCFF75B3885A248B4A310EA
19:25<3B
19:25<50
19:25>02
19:25>0E
19:25>00
19:25>1902003633400100314102003137
19:25>8EA6
19:25<06
19:25<02
19:25<00
19:25<02

*/
bool CommandLayer::procCommand() {
	LOG_DEBUG(LOG_ECL, "procCommand");
	if(commandQueue.isEmpty() == true) {
		return false;
	}

	uint8_t command = commandQueue.pop();
	if(command == Command_Verification) {
		gotoStateVerification();
		return true;
	}
	if(command == Command_VendRequest) {
		gotoStateRequest();
		return true;
	}
	if(command == Command_SessionComplete) {
		gotoStateClosing();
		return true;
	}
	if(command == Command_QrCode) {
		gotoStateQrCode();
		return true;
	}

	return false;
}

void CommandLayer::gotoStateInit() {
	LOG_DEBUG(LOG_ECL, "gotoStateInit");
	req.clear();
	req.addNumber(Tlv_OperationCode, 2, Operation_CheckLink);
	req.addString(Tlv_TerminalId, 0, 0);
	packetLayer->sendPacket(req.getBuf());
	timer->start(INPAS_RECV_TIMEOUT);
	context->setState(State_Init);
}

void CommandLayer::stateInitControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateInitPacket");
	if(control == Control_ACK) {
		timer->start(INPAS_INIT_TIEMOUT);
		context->setStatus(Mdb::DeviceContext::Status_Init);
		return;
	}
	if(control == Control_EOT) {
		gotoStateInitDelay();
		return;
	}
}

void CommandLayer::stateInitPacket() {
	LOG_DEBUG(LOG_ECL, "stateInitPacket");
	uint16_t operation;
	if(packet.getNumber(Tlv_OperationCode, &operation) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	if(operation == Operation_Wait) {
		LOG_DEBUG(LOG_ECL, "Operation wait");
		timer->start(INPAS_INIT_TIEMOUT);
		context->setStatus(Mdb::DeviceContext::Status_Init);
		return;
	}

	if(operation != Operation_CheckLink) {
		LOG_DEBUG(LOG_ECL, "Unwaited operation " << operation);
		context->incProtocolErrorCount();
		return;
	}

	uint16_t result;
	if(packet.getNumber(Tlv_TransactionResult, &result) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	if(packet.getString(Tlv_TerminalId, &terminalId) == true) {
		context->setSerialNumber(terminalId.getData(), terminalId.getLen());
	}

	timer->stop();
	if(result == TransactionResult_Success) {
		LOG_INFO(LOG_ECL, "Link OK");
		context->setStatus(Mdb::DeviceContext::Status_Work);
		gotoStateWait();
		return;
	} else {
		LOG_INFO(LOG_ECL, "Link ERROR");
		context->setStatus(Mdb::DeviceContext::Status_Error);
		gotoStateInitDelay();
		return;
	}
}

void CommandLayer::stateInitTimeout() {
	LOG_DEBUG(LOG_ECL, "stateInitTimeout");
	gotoStateInitDelay();
}

void CommandLayer::gotoStateInitDelay() {
	LOG_DEBUG(LOG_ECL, "gotoStateInitDelay");
	timer->start(INPAS_INIT_DELAY);
	context->setState(State_InitDelay);
}

void CommandLayer::stateInitDelayTimeout() {
	LOG_DEBUG(LOG_ECL, "stateInitDelayTimeout");
	gotoStateInit();
}

void CommandLayer::gotoStateWait() {
	LOG_DEBUG(LOG_ECL, "gotoStateWait");
	timer->start(INPAS_WAIT_DELAY);
	context->setState(State_Wait);
}

void CommandLayer::stateWaitPacket() {
	LOG_DEBUG(LOG_ECL, "stateWaitResponse");
	uint32_t credit;
	if(packet.getNumber(Tlv_Credit, &credit) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	uint16_t currency;
	if(packet.getNumber(Tlv_Currency, &currency) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	uint32_t decimalPoint;
	uint32_t scaleFactor;
	uint8_t mdbVersion;
	if(packet.getMdbOptions(Tlv_MdbOptions, &decimalPoint, &scaleFactor, &mdbVersion) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	LOG_DEBUG(LOG_ECL, "credit=" << credit);
	LOG_DEBUG(LOG_ECL, "currency=" << currency);
	LOG_DEBUG(LOG_ECL, "decimalPoint=" << decimalPoint);
	LOG_DEBUG(LOG_ECL, "scaleFactor=" << scaleFactor);
	LOG_DEBUG(LOG_ECL, "mdbVersion=" << mdbVersion);
	context->init(decimalPoint, scaleFactor);
	context->setCurrency(currency);

	gotoStateSession();
	EventUint32Interface event(deviceId, MdbMasterCashless::Event_SessionBegin, context->value2money(credit));
	eventEngine->transmit(&event);
}

void CommandLayer::stateWaitTimeout() {
	LOG_DEBUG(LOG_ECL, "stateWaitTimeout");
	procCommand();
}

void CommandLayer::gotoStateSession() {
	LOG_DEBUG(LOG_ECL, "gotoStateSession");
	timer->start(MDB_CL_SESSION_TIMEOUT);
	context->setState(State_Session);
}

void CommandLayer::stateSessionControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateSessionControl");
	if(control == Control_EOT) {
		timer->stop();
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::stateSessionTimeout() {
	LOG_DEBUG(LOG_ECL, "stateSessionTimeout");
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
	eventEngine->transmit(&event);
}

void CommandLayer::gotoStateRequest() {
	LOG_DEBUG(LOG_ECL, "gotoStateRequest");
	req.clear();
	req.addNumber(Tlv_Credit, 8, context->money2value(productPrice));
	req.addNumber(Tlv_Currency, 3, context->getCurrency());
	req.addNumber(Tlv_OperationCode, 1, 1);
	packetLayer->sendPacket(req.getBuf());
	timer->start(INPAS_RECV_TIMEOUT);
	context->setState(State_Request);
}

void CommandLayer::stateRequestControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateRequestControl " << control);
	if(control == Control_ACK) {
		gotoStateApproving();
		return;
	}
	if(control == Control_EOT) {
		timer->stop();
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::stateRequestTimeout() {
	LOG_DEBUG(LOG_ECL, "stateRequestTimeout");
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
	eventEngine->transmit(&event);
}

void CommandLayer::gotoStateApproving() {
	LOG_DEBUG(LOG_ECL, "gotoStateApproving");
	timer->start(MDB_CL_APPROVING_TIMEOUT);
	context->setState(State_Approving);
}

void CommandLayer::stateApprovingPacket() {
	LOG_DEBUG(LOG_ECL, "stateApprovingPacket");
	uint16_t operation;
	if(packet.getNumber(Tlv_OperationCode, &operation) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	if(operation == Operation_Wait) {
		LOG_DEBUG(LOG_ECL, "Operation wait");
		return;
	}

	if(operation != Operation_Sale) {
		LOG_DEBUG(LOG_ECL, "Unwaited operation " << operation);
		context->incProtocolErrorCount();
		return;
	}

	uint16_t result;
	if(packet.getNumber(Tlv_TransactionResult, &result) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	timer->stop();
	if(result == TransactionResult_Success) {
		LOG_INFO(LOG_ECL, "Payment approved");
		uint32_t credit;
		if(packet.getNumber(Tlv_Credit, &credit) == false) {
			LOG_ERROR(LOG_ECL, "Bad format");
			context->incProtocolErrorCount();
			return;
		}

		LOG_INFO(LOG_ECL, "credit=" << credit);
		context->setStatus(Mdb::DeviceContext::Status_Work);
		gotoStateWait();
		MdbMasterCashlessInterface::EventApproved event(deviceId, Fiscal::Payment_Cashless, context->value2money(credit));
		eventEngine->transmit(&event);
		return;
	} else if(result == TransactionResult_Denied || result == TransactionResult_Aborted) {
		LOG_INFO(LOG_ECL, "Payment denied");
		context->setStatus(Mdb::DeviceContext::Status_Work);
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
		eventEngine->transmit(&event);
		return;
	} else {
		LOG_INFO(LOG_ECL, "Payment error " << result);
		context->setStatus(Mdb::DeviceContext::Status_Error);
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::stateApprovingControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateApprovingControl");
	if(control == Control_EOT) {
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::stateApprovingTimeout() {
	LOG_DEBUG(LOG_ECL, "stateApprovingTimeout");
	context->incProtocolErrorCount();
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_VendDenied);
	eventEngine->transmit(&event);
}

void CommandLayer::gotoStatePaymentCancel() {
	LOG_INFO(LOG_ECL, "gotoStatePaymentCancel");
	statePaymentCancelSend();
	repeatCount = 0;
	context->setState(State_PaymentCancel);
}

void CommandLayer::statePaymentCancelSend() {
	req.clear();
	req.addNumber(Tlv_Credit, 8, context->money2value(productPrice));
	req.addNumber(Tlv_Currency, 3, context->getCurrency());
	req.addNumber(Tlv_OperationCode, 2, 53);
	packetLayer->sendPacket(req.getBuf());
	timer->start(INPAS_RECV_TIMEOUT);
}

void CommandLayer::statePaymentCancelControl(uint8_t control) {
	LOG_INFO(LOG_ECL, "statePaymentCancelControl " << control);
	if(control == Control_ACK) {
		gotoStatePaymentCancelWait();
		return;
	}
	if(control == Control_EOT) {
		timer->stop();
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::statePaymentCancelTimeout() {
	LOG_INFO(LOG_ECL, "statePaymentCancelTimeout");
	repeatCount++;
	if(repeatCount >= INPAS_CANCEL_TRY_NUMBER) {
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
		eventEngine->transmit(&event);
		return;
	}
	statePaymentCancelSend();
}

void CommandLayer::gotoStatePaymentCancelWait() {
	LOG_DEBUG(LOG_ECL, "gotoStatePaymentCancelWait");
	timer->start(INPAS_CANCEL_TIMEOUT);
	context->setState(State_PaymentCancelWait);
}

void CommandLayer::statePaymentCancelWaitPacket() {
	LOG_DEBUG(LOG_ECL, "statePaymentCancelWaitPacket");
	uint16_t operation;
	if(packet.getNumber(Tlv_OperationCode, &operation) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	if(operation == Operation_Wait) {
		LOG_DEBUG(LOG_ECL, "Operation wait");
		return;
	}

	if(operation != Operation_Cancel) {
		LOG_DEBUG(LOG_ECL, "Unwaited operation " << operation);
		context->incProtocolErrorCount();
		return;
	}

	timer->stop();
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
	eventEngine->transmit(&event);
}

void CommandLayer::statePaymentCancelWaitControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "statePaymentCancelWaitControl");
	if(control == Control_EOT) {
		gotoStateWait();
		EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
		eventEngine->transmit(&event);
		return;
	}
}

void CommandLayer::statePaymentCancelWaitTimeout() {
	LOG_DEBUG(LOG_ECL, "statePaymentCancelWaitTimeout");
	context->incProtocolErrorCount();
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
	eventEngine->transmit(&event);
}

void CommandLayer::gotoStateClosing() {
	LOG_DEBUG(LOG_ECL, "gotoStateClosing");
	timer->start(1);
	context->setState(State_Closing);
}

void CommandLayer::stateClosingTimeout() {
	LOG_DEBUG(LOG_ECL, "stateClosingTimeout");
	gotoStateWait();
	EventInterface event(deviceId, MdbMasterCashless::Event_SessionEnd);
	eventEngine->transmit(&event);
}

//note: ? Tlv_PrintText ?????? ???? ??????????? ?????? ?????? ? ?????
//char qrText[] = "0xDF^^https://en.wikipedia.org/wiki/Thorax~";
void CommandLayer::gotoStateQrCode() {
	LOG_DEBUG(LOG_ECL, "gotoStateQrCode");
	req.clear();
	req.addNumber(Tlv_OperationCode, 2, 41);
	req.addNumber(Tlv_PrintTimeout, 2, INPAS_QRCODE_TIMEOUT / 1000);
	req.addNumber(Tlv_CommandMode, 1, 4);
	req.addString(Tlv_CheckShape, qrCodeData.getString(), qrCodeData.getLen());
	req.addString(Tlv_PrintText, qrCodeHeader.getString(), qrCodeHeader.getLen());
	packetLayer->sendPacket(req.getBuf());
	timer->start(INPAS_RECV_TIMEOUT);
	context->setState(State_QrCode);
}

void CommandLayer::stateQrCodeControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateQrCodeControl " << control);
	if(control == Control_ACK) {
		gotoStateQrCodeWait();
		return;
	}
	if(control == Control_EOT) {
		LOG_ERROR(LOG_ECL, "QR-code failed");
		timer->stop();
		gotoStateWait();
		return;
	}
}

void CommandLayer::stateQrCodeTimeout() {
	LOG_DEBUG(LOG_ECL, "stateQrCodeTimeout");
	gotoStateWait();
}

void CommandLayer::gotoStateQrCodeWait() {
	LOG_DEBUG(LOG_ECL, "gotoStateQrCodeWait");
	timer->start(INPAS_QRCODE_TIMEOUT*2);
	context->setState(State_QrCodeWait);
}

void CommandLayer::stateQrCodeWaitPacket() {
	LOG_DEBUG(LOG_ECL, "stateQrCodeWaitPacket");
	uint32_t mode;
	if(packet.getNumber(Tlv_CommandMode, &mode) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		gotoStateWait();
		return;
	}

	uint32_t result;
	if(packet.getNumber(Tlv_CommandResult, &result) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		gotoStateWait();
		return;
	}

	LOG_DEBUG(LOG_ECL, "mode=" << mode);
	LOG_DEBUG(LOG_ECL, "result=" << result);
	gotoStateWait();
}

void CommandLayer::stateQrCodeWaitTimeout() {
	LOG_DEBUG(LOG_ECL, "stateQrCodeWaitTimeout");
	gotoStateWait();
}

void CommandLayer::gotoStateVerification() {
#if 0
	LOG_DEBUG(LOG_ECL, "gotoStateVerification");
	StringBuilder text;
	text << "Hello world";

	req.clear();
	req.addNumber(Tlv_OperationCode, 2, Operation_Message);
	req.addNumber(Tlv_PrintTimeout, 3, 999);
	req.addNumber(Tlv_CommandMode, 1, 2);
	req.addString(Tlv_PrintText, text.getString(), text.getLen());
	packetLayer->sendPacket(req.getBuf());
	timer->start(30000);
	context->setState(State_Verification);
#else
	LOG_DEBUG(LOG_ECL, "gotoStateVerification");
	req.clear();
	req.addNumber(Tlv_OperationCode, 2, Operation_Verification);
	req.addString(Tlv_TerminalId, 0, 0);
	packetLayer->sendPacket(req.getBuf());
	timer->start(INPAS_RECV_TIMEOUT);
	context->setState(State_Verification);
#endif
}

void CommandLayer::stateVerificationControl(uint8_t control) {
	LOG_DEBUG(LOG_ECL, "stateVerificationControl " << control);
	if(control == Control_ACK) {
		timer->start(INPAS_VERIFICATION_TIEMOUT);
		return;
	}

	if(control == Control_EOT) {
		LOG_ERROR(LOG_ECL, "QR-code failed");
		timer->stop();
		gotoStateWait();
		return;
	}
}

void CommandLayer::stateVerificationPacket() {
	LOG_DEBUG(LOG_ECL, "stateVerificationPacket");
	uint16_t operation;
	if(packet.getNumber(Tlv_OperationCode, &operation) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	if(operation == Operation_Wait) {
		LOG_DEBUG(LOG_ECL, "Operation wait");
		return;
	}

	if(operation != Operation_Verification) {
		LOG_DEBUG(LOG_ECL, "Unwaited operation " << operation);
		context->incProtocolErrorCount();
		return;
	}

	uint16_t result;
	if(packet.getNumber(Tlv_TransactionResult, &result) == false) {
		LOG_ERROR(LOG_ECL, "Bad format");
		context->incProtocolErrorCount();
		return;
	}

	timer->stop();
	if(result == TransactionResult_Success) {
		LOG_INFO(LOG_ECL, "Verification succeed");
		gotoStateWait();
		return;
	} else {
		LOG_INFO(LOG_ECL, "Verification failed");
		gotoStateInit();
		return;
	}
}

void CommandLayer::stateVerificationTimeout() {
	LOG_DEBUG(LOG_ECL, "stateVerificationTimeout");
	gotoStateWait();
}

}
