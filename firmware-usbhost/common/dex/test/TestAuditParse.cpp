#if 0
#include "TestAuditParse.h"

#include "common/dex/include/AuditParser.h"
#include "common/dex/test/TestAuditParse.h"

#include "common/test/include/Test.h"

TEST_SET_REGISTER(AuditParseTest);

AuditParseTest::AuditParseTest() {
	TEST_CASE_REGISTER(AuditParseTest, testParseAudit_Sambery_Ogon);
	TEST_CASE_REGISTER(AuditParseTest, testParseAudit_CoinCo_Global2);
	TEST_CASE_REGISTER(AuditParseTest, testSearch);
}

bool AuditParseTest::testParseAudit_Sambery_Ogon() {
	const char *data =
"DXS*SAMBERY001*VA*V0/6*1\r\n"
"ST*001*0001\r\n"
"ID1******135\r\n"
"ID4*2*7\r\n"
"VA1*6000*6*6000*6\r\n"
"CA17*1*100*21***0\r\n"
"CA17*2*200*26***0\r\n"
"CA17*3*500*49***0\r\n"
"CA17*5*1000*69***0\r\n"
"PA1*11*0*^ED^^E5^ ^E8^^F1^^EF^^EE^^EB^^FC^^E7^^F3^^E5^^F2^^F1^^FF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*11*CA*0*0*0*0*0*0\r\n"
"PA7*11*CA*1*6000*0*0*0*0\r\n"
"PA1*12*3500*^D7^^E8^^EF^^F1^^FB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*12*CA*0*3500*0*0*0*0\r\n"
"PA7*12*CA*1*9000*0*0*0*0\r\n"
"PA1*13*0*^ED^^E5^ ^E8^^F1^^EF^^EE^^EB^^FC^^E7^^F3^^E5^^F2^^F1^^FF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*13*CA*0*0*0*0*0*0\r\n"
"PA7*13*CA*1*5000*0*0*0*0\r\n"
"PA1*14*4500*^D5^^F0^^F3^^F1^^F2^^E8^^EC^ ^E1^^E0^^E3^^E5^^F2^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*14*CA*0*4500*0*0*0*0\r\n"
"PA7*14*CA*1*12164*0*0*0*0\r\n"
"PA1*15*0*^ED^^E5^ ^E8^^F1^^EF^^EE^^EB^^FC^^E7^^F3^^E5^^F2^^F1^^FF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*15*CA*0*0*0*0*0*0\r\n"
"PA7*15*CA*1*37700*0*0*0*0\r\n"
"PA1*16*2500*^C2^^E0^^F4^^EB^^E8^ ^EC^^FF^^E3^^EA^^E8^^E5^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*16*CA*0*2500*0*0*0*0\r\n"
"PA7*16*CA*1*37759*0*0*0*0\r\n"
"PA1*17*0*^ED^^E5^ ^E8^^F1^^EF^^EE^^EB^^FC^^E7^^F3^^E5^^F2^^F1^^FF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*17*CA*0*0*0*0*0*0\r\n"
"PA7*17*CA*1*37759*0*0*0*0\r\n"
"PA1*18*3500*^CA^^F0^^F3^^E0^^F1^^F1^^E0^^ED^^FB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*18*CA*0*3500*0*0*0*0\r\n"
"PA7*18*CA*1*37759*0*0*0*0\r\n"
"PA1*21*4000*^D1^^F3^^EF^^E5^^F0^-^CA^^EE^^ED^^F2^^E8^^EA^ 100^E3^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*21*CA*0*4000*0*0*0*0\r\n"
"PA7*21*CA*1*37759*0*0*0*0\r\n"
"PA1*22*4500*^D7^^E5^^EC^^EF^^E8^^EE^^ED^ ^E2^^EA^^F3^^F1^^E0^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*22*CA*0*4500*0*0*0*0\r\n"
"PA7*22*CA*1*37759*0*0*0*0\r\n"
"PA1*23*4200*M&M's\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*23*CA*0*4200*0*0*0*0\r\n"
"PA7*23*CA*1*37759*0*0*0*0\r\n"
"PA1*24*4200*^C1^^E0^^F3^^ED^^F2^^E8^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*24*CA*0*4200*0*0*0*0\r\n"
"PA7*24*CA*1*37759*0*0*0*0\r\n"
"PA1*25*2500*^D1^^EE^^EB^^EE^^EC^^EA^^E0^ ^F1^^EE^^EB^^E5^^ED^^E0^^FF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*25*CA*0*2500*0*0*0*0\r\n"
"PA7*25*CA*1*37759*0*0*0*0\r\n"
"PA1*26*2800*TUC\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*26*CA*0*2800*0*0*0*0\r\n"
"PA7*26*CA*1*37759*0*0*0*0\r\n"
"PA1*27*1600*^D7^^CE^^CA^^CE^^CF^^C0^^C9^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*27*CA*0*1600*0*0*0*0\r\n"
"PA7*27*CA*1*37759*0*0*0*0\r\n"
"PA1*28*1600*^D7^^CE^^CA^^CE^^CF^^C0^^C9^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*28*CA*0*1600*0*0*0*0\r\n"
"PA7*28*CA*1*37759*0*0*0*0\r\n"
"PA1*31*5000*^D2^^F3^^EB^^FC^^F1^^EA^^E8^^E9^ ^EF^^F0^^FF^^ED^^E8^^EA^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*31*CA*0*5000*0*0*0*0\r\n"
"PA7*31*CA*1*37759*0*0*0*0\r\n"
"PA1*32*2000*^D1^^EF^^F0^^E8^^ED^^F2^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*32*CA*0*2000*0*0*0*0\r\n"
"PA7*32*CA*1*37759*0*0*0*0\r\n"
"PA1*33*6000*^D1^^F3^^EF^^E5^^F0^ ^D1^^ED^^E8^^EA^^E5^^F0^^F1^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*33*CA*0*6000*0*0*0*0\r\n"
"PA7*33*CA*1*37759*0*0*0*0\r\n"
"PA1*34*4200*^CA^^E8^^F2^-^CA^^E0^^F2^ 4 ^EF^^E0^^EB^^FC^^F6^^E0^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*34*CA*0*4200*0*0*0*0\r\n"
"PA7*34*CA*1*37759*0*0*0*0\r\n"
"PA1*35*6000*^D2^^E2^^E8^^EA^^F1^ ^FD^^EA^^F1^^F2^^F0^^E0^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*35*CA*0*6000*0*0*0*0\r\n"
"PA7*35*CA*1*37759*0*0*0*0\r\n"
"PA1*36*4200*^CD^^E0^^F2^^F1^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*36*CA*0*4200*0*0*0*0\r\n"
"PA7*36*CA*1*37759*0*0*0*0\r\n"
"PA1*37*4200*^CA^^E8^^F2^-^CA^^E0^^F2^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*37*CA*0*4200*0*0*0*0\r\n"
"PA7*37*CA*1*37759*0*0*0*0\r\n"
"PA1*38*3000*^D1^^F2^^E5^^EF^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*38*CA*0*3000*0*0*0*0\r\n"
"PA7*38*CA*1*37759*0*0*0*0\r\n"
"PA1*41*3500*^CF^^E5^^F7^^E5^^ED^^FC^^E5^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*41*CA*0*3500*0*0*0*0\r\n"
"PA7*41*CA*1*37759*0*0*0*0\r\n"
"PA1*42*3000*^C0^^F0^^E0^^F5^^E8^^F1^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*42*CA*0*3000*0*0*0*0\r\n"
"PA7*42*CA*1*37759*0*0*0*0\r\n"
"PA1*43*2000*^D1^^F3^^F5^^E0^^F0^^E8^^EA^^E8^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*43*CA*0*2000*0*0*0*0\r\n"
"PA7*43*CA*1*37759*0*0*0*0\r\n"
"PA1*44*2600*^C3^^F0^^E5^^ED^^EA^^E8^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*44*CA*0*2600*0*0*0*0\r\n"
"PA7*44*CA*1*37759*0*0*0*0\r\n"
"PA1*45*2500*^D5^^F0^^F3^^F1^^F2^^E8^^EC^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*45*CA*0*2500*0*0*0*0\r\n"
"PA7*45*CA*1*37759*0*0*0*0\r\n"
"PA1*46*4200*FITNESS ^E1^^E0^^F2^^EE^^ED^^F7^^E8^^EA^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*46*CA*0*4200*0*0*0*0\r\n"
"PA7*46*CA*1*37759*0*0*0*0\r\n"
"PA1*47*2500*^D1^^EE^^EA^ 0,2^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*47*CA*0*2500*0*0*0*0\r\n"
"PA7*47*CA*1*37759*0*0*0*0\r\n"
"PA1*48*4500*^D7^^F3^^E4^^EE^-^F8^^EE^^EA^^EE^^EB^^E0^^E4^ 0,2^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*48*CA*0*4500*0*0*0*0\r\n"
"PA7*48*CA*1*37759*0*0*0*0\r\n"
"PA1*51*6000*Frash bar 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*51*CA*0*6000*0*0*0*0\r\n"
"PA7*51*CA*1*37759*0*0*0*0\r\n"
"PA1*52*6000*MIO 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*52*CA*0*6000*0*0*0*0\r\n"
"PA7*52*CA*1*37759*0*0*0*0\r\n"
"PA1*53*6000*^CA^^EE^^EA^^E0^-^EA^^EE^^EB^^E0^ 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*53*CA*0*6000*0*0*0*0\r\n"
"PA7*53*CA*1*37759*0*0*0*0\r\n"
"PA1*54*4500*^D4^^F0^^F3^^F2^^EC^^EE^^F2^^E8^^E2^ 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*54*CA*0*4500*0*0*0*0\r\n"
"PA7*54*CA*1*37759*0*0*0*0\r\n"
"PA1*55*1000*^C2^^EE^^E4^^E0^ + 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*55*CA*0*1000*6*6000*6*6000\r\n"
"PA7*55*CA*1*37759*0*0*0*0\r\n"
"PA1*56*2000*^C2^^EE^^E4^^E0^ 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*56*CA*0*2000*0*0*0*0\r\n"
"PA7*56*CA*1*37759*0*0*0*0\r\n"
"PA1*57*2000*^C2^^EE^^E4^^E0^ 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*57*CA*0*2000*0*0*0*0\r\n"
"PA7*57*CA*1*37759*0*0*0*0\r\n"
"PA1*58*2500*^CB^^E8^^EC^^EE^^ED^^E0^^E4^ 0,5^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*58*CA*0*2500*0*0*0*0\r\n"
"PA7*58*CA*1*37759*0*0*0*0\r\n"
"PA1*61*4500*^CC^^E0^^F3^^ED^^F2^^E8^^ED^ ^C4^^FC^^FE^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*61*CA*0*4500*0*0*0*0\r\n"
"PA7*61*CA*1*37759*0*0*0*0\r\n"
"PA1*62*4500*^D4^^E0^^ED^^F2^^E0^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*62*CA*0*4500*0*0*0*0\r\n"
"PA7*62*CA*1*37759*0*0*0*0\r\n"
"PA1*63*4500*^D1^^EF^^F0^^E0^^E9^^F2^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*63*CA*0*4500*0*0*0*0\r\n"
"PA7*63*CA*1*37759*0*0*0*0\r\n"
"PA1*64*4500*^CA^^EE^^EA^^E0^-^EA^^EE^^EB^^E0^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*64*CA*0*4500*0*0*0*0\r\n"
"PA7*64*CA*1*37759*0*0*0*0\r\n"
"PA1*65*4500*^CA^^EE^^EA^^E0^-^CA^^EE^^EB^^E0^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*65*CA*0*4500*0*0*0*0\r\n"
"PA7*65*CA*1*37759*0*0*0*0\r\n"
"PA1*66*4500*^CB^^E8^^EF^^F2^^EE^^ED^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*66*CA*0*4500*0*0*0*0\r\n"
"PA7*66*CA*1*37759*0*0*0*0\r\n"
"PA1*67*4500*MIO 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*67*CA*0*4500*0*0*0*0\r\n"
"PA7*67*CA*1*37759*0*0*0*0\r\n"
"PA1*68*4500*^CB^^E8^^EF^^F2^^EE^^ED^ 0,33^EB^\r\n"
"PA3*0\r\n"
"PA4*0\r\n"
"PA7*68*CA*0*4500*0*0*0*0\r\n"
"PA7*68*CA*1*3000*0*0*0*0\r\n"
"G85*1234SE*249*0001\r\n"
"DXE*1*1\r\n";
	Audit audit1;
	AuditParser parser;
	parser.start(&audit1);
	parser.parse((const uint8_t*)data, strlen(data));
	TEST_NUMBER_EQUAL(48, audit1.len());

	AuditProduct *product = audit1.getProductById("68");
	TEST_STRING_EQUAL("68", product->id.getString());
	TEST_STRING_EQUAL("Ëèïòîí 0,33ë", product->name.getString());
	TEST_NUMBER_EQUAL(45, audit1.convertValueToMoney(product->ca0price));
	TEST_NUMBER_EQUAL(0, product->ca0saleTotal);

	return true;
}

bool AuditParseTest::testParseAudit_CoinCo_Global2() {
	const char *data =
"DXS*9259630009*VA*V1/1*1**\r\n"
"ST*001*0001\r\n"
"ID1*00000000***00000000**\r\n"
"ID4*0*0007*001\r\n"
"VA1*971226*68773*0*0\r\n"
"VA3*0*1185*0*0\r\n"
"BA1**RU67VM60*0p\r\n"
"CA1*0807521682/07840684*RUR-A801*0007*RUR-G801-U04*\r\n"
"CA2*971226*68773*0*0\r\n"
"CA3*0*0*0*0*1319090*359928*291042*668120\r\n"
"CA4*0*0*290936*2871\r\n"
"CA7*0*0\r\n"
"CA8*0*38781\r\n"
"CA9*0*3601\r\n"
"CA10*0*21018\r\n"
"CA17*0*1*0**\r\n"
"CA17*2*5*2**\r\n"
"CA17*4*10*6**\r\n"
"CA15*70*********\r\n"
"TA2*0*0*0*0*0*0*0*0\r\n"
"TA3*0*0\r\n"
"TA5*0*0\r\n"
"DA1***\r\n"
"DA2*0*0*0*0\r\n"
"DA3*0*0\r\n"
"DA4*0*0\r\n"
"DA5*0*0*0*0\r\n"
"DA7*0*0*0*0*0*0\r\n"
"DA7*1*0*0*0*0*0\r\n"
"DA7*2*0*0*0*0*0\r\n"
"DA7*3*0*0*0*0*0\r\n"
"DA7*4*0*0*0*0*0\r\n"
"LA1*0*1*10*0*2\r\n"
"LA1*0*2*20*0*0\r\n"
"LA1*0*3*3*0*0\r\n"
"LA1*0*4*2*0*0\r\n"
"LA1*0*5*2*0*0\r\n"
"LA1*0*6*2*0*0\r\n"
"LA1*0*7*2*0*0\r\n"
"LA1*0*8*30*0*1\r\n"
"LA1*0*9*2*0*0\r\n"
"LA1*0*10*2*0*0\r\n"
"LA1*0*11*2*0*0\r\n"
"LA1*0*12*2*0*0\r\n"
"LA1*0*13*2*0*0\r\n"
"LA1*0*14*2*0*0\r\n"
"LA1*0*15*2*0*0\r\n"
"LA1*0*16*2*0*0\r\n"
"LA1*0*17*2*0*0\r\n"
"LA1*0*18*2*0*0\r\n"
"LA1*0*19*2*0*0\r\n"
"LA1*0*20*2*0*0\r\n"
"LA1*0*21*2*0*0\r\n"
"LA1*0*22*2*0*0\r\n"
"LA1*0*23*2*0*0\r\n"
"LA1*0*24*2*0*0\r\n"
"LA1*0*25*2*0*0\r\n"
"LA1*0*26*250*0*0\r\n"
"LA1*0*27*250*0*0\r\n"
"LA1*0*28*250*0*0\r\n"
"LA1*0*29*250*0*0\r\n"
"LA1*0*30*250*0*0\r\n"
"LA1*0*31*250*0*0\r\n"
"LA1*0*32*250*0*0\r\n"
"LA1*0*33*250*0*0\r\n"
"LA1*0*34*250*0*0\r\n"
"LA1*0*35*250*0*0\r\n"
"LA1*0*36*250*0*0\r\n"
"LA1*0*37*250*0*0\r\n"
"LA1*0*38*250*0*0\r\n"
"LA1*0*39*250*0*0\r\n"
"LA1*0*40*250*0*0\r\n"
"LA1*0*41*250*0*0\r\n"
"LA1*0*42*250*0*0\r\n"
"LA1*0*43*250*0*0\r\n"
"LA1*0*44*250*0*0\r\n"
"LA1*0*45*250*0*0\r\n"
"LA1*0*46*250*0*0\r\n"
"LA1*0*47*250*0*0\r\n"
"LA1*0*48*250*0*0\r\n"
"LA1*0*49*250*0*0\r\n"
"LA1*0*50*250*0*0\r\n"
"LA1*1*1*250*0*0\r\n"
"LA1*1*2*250*0*0\r\n"
"LA1*1*3*250*0*0\r\n"
"LA1*1*4*250*0*0\r\n"
"LA1*1*5*250*0*0\r\n"
"LA1*1*6*250*0*0\r\n"
"LA1*1*7*250*0*0\r\n"
"LA1*1*8*250*0*0\r\n"
"LA1*1*9*250*0*0\r\n"
"LA1*1*10*250*0*0\r\n"
"LA1*1*11*250*0*0\r\n"
"LA1*1*12*250*0*0\r\n"
"LA1*1*13*250*0*0\r\n"
"LA1*1*14*250*0*0\r\n"
"LA1*1*15*250*0*0\r\n"
"LA1*1*16*250*0*0\r\n"
"LA1*1*17*250*0*0\r\n"
"LA1*1*18*250*0*0\r\n"
"LA1*1*19*250*0*0\r\n"
"LA1*1*20*250*0*0\r\n"
"LA1*1*21*250*0*0\r\n"
"LA1*1*22*250*0*0\r\n"
"LA1*1*23*250*0*0\r\n"
"LA1*1*24*250*0*0\r\n"
"LA1*1*25*250*0*0\r\n"
"LA1*1*26*250*0*0\r\n"
"LA1*1*27*250*0*0\r\n"
"LA1*1*28*250*0*0\r\n"
"LA1*1*29*250*0*0\r\n"
"LA1*1*30*250*0*0\r\n"
"LA1*1*31*250*0*0\r\n"
"LA1*1*32*250*0*0\r\n"
"LA1*1*33*250*0*0\r\n"
"LA1*1*34*250*0*0\r\n"
"LA1*1*35*250*0*0\r\n"
"LA1*1*36*250*0*0\r\n"
"LA1*1*37*250*0*0\r\n"
"LA1*1*38*250*0*0\r\n"
"LA1*1*39*250*0*0\r\n"
"LA1*1*40*250*0*0\r\n"
"LA1*1*41*250*0*0\r\n"
"LA1*1*42*250*0*0\r\n"
"LA1*1*43*250*0*0\r\n"
"LA1*1*44*250*0*0\r\n"
"LA1*1*45*250*0*0\r\n"
"LA1*1*46*250*0*0\r\n"
"LA1*1*47*250*0*0\r\n"
"LA1*1*48*250*0*0\r\n"
"LA1*1*49*250*0*0\r\n"
"LA1*1*50*250*0*0\r\n"
"PA1*1*****\r\n"
"PA2*2*20*0*0\r\n"
"PA1*2*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*3*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*4*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*5*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*6*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*7*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*8*****\r\n"
"PA2*1*30*0*0\r\n"
"PA1*9*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*10*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*11*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*12*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*13*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*14*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*15*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*16*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*17*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*18*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*19*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*20*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*21*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*22*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*23*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*24*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*25*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*26*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*27*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*28*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*29*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*30*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*31*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*32*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*33*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*34*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*35*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*36*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*37*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*38*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*39*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*40*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*41*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*42*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*43*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*44*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*45*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*46*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*47*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*48*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*49*****\r\n"
"PA2*0*0*0*0\r\n"
"PA1*50*****\r\n"
"PA2*0*0*0*0\r\n"
"EA1******\r\n"
"EA3*1*******\r\n"
"EA7*0*4182\r\n"
"MA5*OPT1**100*0*255*4*0*1***0\r\n"
"MA5*OPT2**********0\r\n"
"MA5*OPT3*100**100****2***\r\n"
"MA5*OPT4*********0*0\r\n"
"MA5*OPT5*0*0*1*1*5*50*0*0**\r\n"
"MA5*OPT6**********\r\n"
"MA5*OPT7*****0*21*0*0*0*0\r\n"
"MA5*OPT8*0*0*0*0*0*0*0*0*0*0\r\n"
"MA5*MISC*1*0*5855*0\r\n"
"G85*79A3\r\n"
"SE*245*0001\r\n"
"DXE*1*1";
	Audit audit1;
	AuditParser parser;
	parser.start(&audit1);
	parser.parse((const uint8_t*)data, strlen(data));
	TEST_NUMBER_EQUAL(50, audit1.len());

	AuditProduct *product = audit1.getProductById("8");
	TEST_STRING_EQUAL("8", product->id.getString());
	TEST_STRING_EQUAL("", product->name.getString());
	TEST_NUMBER_EQUAL(30, audit1.convertValueToMoney(product->ca0price));
	TEST_NUMBER_EQUAL(1, product->ca0saleTotal);

	return true;
}

bool AuditParseTest::testSearch() {
	StringBuilder str1;
	str1 << "DXS*JOF0000000*VA*V0/6*1\r\n";
	str1 << "ID1******0*6*1\r\n";
	str1 << "ID4*1*7*\r\n";
	str1 << "PA1*01*250*Ýñïðåññî\r\n";
	str1 << "PA3*22**22\r\n";
	str1 << "PA7*01*CA*0*250*878*114399*878*114399\r\n";
	str1 << "PA1*02*270*^d0^^9a^d0^^b0^^d0^^bf^^d1^^83^^d1^^87^^d0^^b8^^d0^^bd^^d0^^be^\r\n";
	str1 << "PA3*0**0\r\n";
	str1 << "PA7*02*CA*0*270*1028*130879*1028*130879\r\n";
	Audit audit1;
	AuditParser parser;
	parser.start(&audit1);
	parser.parse((const uint8_t*)str1.getString(), str1.getLen());
	TEST_NUMBER_EQUAL(2, audit1.len());

	StringBuilder str2;
	str2 << "DXS*JOF0000000*VA*V0/6*1\r\n";
	str2 << "ID1******0*6*1\r\n";
	str2 << "ID4*1*7*\r\n";
	str2 << "PA1*01*250*Ýñïðåññî\r\n";
	str2 << "PA3*22**22\r\n";
	str2 << "PA7*01*CA*0*250*878*114399*878*114399\r\n";
	str2 << "PA1*02*270*Êàïó÷èíî\r\n";
	str2 << "PA3*0**0\r\n";
	str2 << "PA7*02*CA*0*270*1029*130879*1029*130879\r\n";
	Audit audit2;
	parser.start(&audit2);
	parser.parse((const uint8_t*)str2.getString(), str2.getLen());
	TEST_NUMBER_EQUAL(2, audit2.len());

	AuditProduct *product = audit2.search(&audit1);
	TEST_NUMBER_NOT_EQUAL((uint32_t)NULL, (uint32_t)product);
	TEST_STRING_EQUAL("02", product->id.getString());
	TEST_STRING_EQUAL("Êàïó÷èíî", product->name.getString());
	TEST_NUMBER_EQUAL(27, audit1.convertValueToMoney(product->ca0price));
	TEST_NUMBER_EQUAL(1029, product->ca0saleTotal);

	return true;
}
#endif
