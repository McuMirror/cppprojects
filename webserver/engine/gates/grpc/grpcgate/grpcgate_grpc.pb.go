// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcgate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	// Открыть соединение со Scada сервером
	DoOpen(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error)
	// Закрыть соединение
	DoClose(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*Response, error)
	// Выполнить запрос
	DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Нужна-ли авторизация для сервера при получении данных?
	IsAuthRequired(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Тестирование соединения
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) DoOpen(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpcgate.GrpcService/doOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) DoClose(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpcgate.GrpcService/doClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpcgate.GrpcService/doRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) IsAuthRequired(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpcgate.GrpcService/isAuthRequired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpcgate.GrpcService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	// Открыть соединение со Scada сервером
	DoOpen(context.Context, *Login) (*Response, error)
	// Закрыть соединение
	DoClose(context.Context, *Logout) (*Response, error)
	// Выполнить запрос
	DoRequest(context.Context, *Request) (*Response, error)
	// Нужна-ли авторизация для сервера при получении данных?
	IsAuthRequired(context.Context, *Request) (*Response, error)
	// Тестирование соединения
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) DoOpen(context.Context, *Login) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOpen not implemented")
}
func (UnimplementedGrpcServiceServer) DoClose(context.Context, *Logout) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoClose not implemented")
}
func (UnimplementedGrpcServiceServer) DoRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRequest not implemented")
}
func (UnimplementedGrpcServiceServer) IsAuthRequired(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthRequired not implemented")
}
func (UnimplementedGrpcServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&_GrpcService_serviceDesc, srv)
}

func _GrpcService_DoOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DoOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgate.GrpcService/doOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DoOpen(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_DoClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Logout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DoClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgate.GrpcService/doClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DoClose(ctx, req.(*Logout))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_DoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgate.GrpcService/doRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DoRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_IsAuthRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).IsAuthRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgate.GrpcService/isAuthRequired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).IsAuthRequired(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgate.GrpcService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgate.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "doOpen",
			Handler:    _GrpcService_DoOpen_Handler,
		},
		{
			MethodName: "doClose",
			Handler:    _GrpcService_DoClose_Handler,
		},
		{
			MethodName: "doRequest",
			Handler:    _GrpcService_DoRequest_Handler,
		},
		{
			MethodName: "isAuthRequired",
			Handler:    _GrpcService_IsAuthRequired_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GrpcService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcgate.proto",
}
