// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scdgate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MdxServiceClient is the client API for MdxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MdxServiceClient interface {
	// Открыть соединение со Scada сервером
	DoOpen(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error)
	// Закрыть соединение
	DoClose(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*Response, error)
	// Выполнить запрос
	DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Тестирование соединения
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type mdxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMdxServiceClient(cc grpc.ClientConnInterface) MdxServiceClient {
	return &mdxServiceClient{cc}
}

func (c *mdxServiceClient) DoOpen(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scdgate.MdxService/doOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mdxServiceClient) DoClose(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scdgate.MdxService/doClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mdxServiceClient) DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scdgate.MdxService/doRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mdxServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scdgate.MdxService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MdxServiceServer is the server API for MdxService service.
// All implementations must embed UnimplementedMdxServiceServer
// for forward compatibility
type MdxServiceServer interface {
	// Открыть соединение со Scada сервером
	DoOpen(context.Context, *Login) (*Response, error)
	// Закрыть соединение
	DoClose(context.Context, *Logout) (*Response, error)
	// Выполнить запрос
	DoRequest(context.Context, *Request) (*Response, error)
	// Тестирование соединения
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedMdxServiceServer()
}

// UnimplementedMdxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMdxServiceServer struct {
}

func (UnimplementedMdxServiceServer) DoOpen(context.Context, *Login) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOpen not implemented")
}
func (UnimplementedMdxServiceServer) DoClose(context.Context, *Logout) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoClose not implemented")
}
func (UnimplementedMdxServiceServer) DoRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRequest not implemented")
}
func (UnimplementedMdxServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMdxServiceServer) mustEmbedUnimplementedMdxServiceServer() {}

// UnsafeMdxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MdxServiceServer will
// result in compilation errors.
type UnsafeMdxServiceServer interface {
	mustEmbedUnimplementedMdxServiceServer()
}

func RegisterMdxServiceServer(s grpc.ServiceRegistrar, srv MdxServiceServer) {
	s.RegisterService(&_MdxService_serviceDesc, srv)
}

func _MdxService_DoOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MdxServiceServer).DoOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdgate.MdxService/doOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MdxServiceServer).DoOpen(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _MdxService_DoClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Logout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MdxServiceServer).DoClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdgate.MdxService/doClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MdxServiceServer).DoClose(ctx, req.(*Logout))
	}
	return interceptor(ctx, in, info, handler)
}

func _MdxService_DoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MdxServiceServer).DoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdgate.MdxService/doRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MdxServiceServer).DoRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MdxService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MdxServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdgate.MdxService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MdxServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MdxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scdgate.MdxService",
	HandlerType: (*MdxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "doOpen",
			Handler:    _MdxService_DoOpen_Handler,
		},
		{
			MethodName: "doClose",
			Handler:    _MdxService_DoClose_Handler,
		},
		{
			MethodName: "doRequest",
			Handler:    _MdxService_DoRequest_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MdxService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scdgate.proto",
}
