import { b as baseClone } from '../common/_baseClone-22db1e7d.js';
import '../common/_Uint8Array-f6bf0ba4.js';
import '../common/_MapCache-a2429e01.js';
import '../common/isObjectLike-13d75f34.js';
import './isObject.js';
import '../common/isArray-3d6a7c93.js';
import '../common/_initCloneObject-8091dd45.js';
import '../common/_getPrototype-62e8dd03.js';
import '../common/_overArg-c7418829.js';
import '../common/_getTag-a84770ec.js';

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

export default cloneDeep;
//# sourceMappingURL=cloneDeep.js.map
